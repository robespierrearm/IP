/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * npx tsx scripts/activate-user.ts <email>
 */

import { config } from 'dotenv';
import { resolve } from 'path';
import { createClient } from '@supabase/supabase-js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env.local
config({ path: resolve(process.cwd(), '.env.local') });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('\n‚ùå –û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function activateUser(email: string) {
  console.log('\nüîì –ê–ö–¢–ò–í–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø\n');
  console.log('='.repeat(60));

  try {
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: user, error: findError } = await supabase
      .from('users')
      .select('*')
      .ilike('email', email.toLowerCase().trim())
      .single();

    if (findError || !user) {
      console.error(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email "${email}" –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
      return;
    }

    console.log(`\n‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:`);
    console.log(`   Email: ${user.email}`);
    console.log(`   Username: ${user.username}`);
    console.log(`   –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${user.is_active ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n`);

    if (user.is_active) {
      console.log('‚ÑπÔ∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω! –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º.\n');
      return;
    }

    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { error: updateError } = await supabase
      .from('users')
      .update({ is_active: true })
      .eq('id', user.id);

    if (updateError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:', updateError.message);
      return;
    }

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n');
    console.log('–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤—Ö–æ–¥–∏—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É.\n');

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', err instanceof Error ? err.message : err);
  }
}

// –ü–æ–ª—É—á–∞–µ–º email –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const email = process.argv[2];

if (!email) {
  console.error('\n‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n');
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npx tsx scripts/activate-user.ts <email>\n');
  console.log('–ü—Ä–∏–º–µ—Ä: npx tsx scripts/activate-user.ts user@example.com\n');
  process.exit(1);
}

activateUser(email);
