/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * npx tsx scripts/check-user.ts
 */

import { config } from 'dotenv';
import { resolve } from 'path';
import { createClient } from '@supabase/supabase-js';
import bcrypt from 'bcryptjs';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env.local
config({ path: resolve(process.cwd(), '.env.local') });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('\n‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
  console.error('–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª .env.local —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç:');
  console.error('  - NEXT_PUBLIC_SUPABASE_URL');
  console.error('  - NEXT_PUBLIC_SUPABASE_ANON_KEY\n');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

interface User {
  id: number;
  username: string;
  email: string;
  password: string;
  is_active: boolean;
  is_online: boolean;
  last_activity: string;
  telegram_id: string | null;
  created_at: string;
  updated_at: string;
}

async function checkUser() {
  console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –í –ë–ê–ó–ï\n');
  console.log('='.repeat(60));

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { data: users, error } = await supabase
      .from('users')
      .select('*')
      .order('id');

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error.message);
      return;
    }

    if (!users || users.length === 0) {
      console.log('\n‚ö†Ô∏è  –í –±–∞–∑–µ –ù–ï–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô!\n');
      console.log('–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...\n');
      await createTestUser();
      return;
    }

    console.log(`\n‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}\n`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users.forEach((user: any, index: number) => {
      const isBcryptHash = user.password?.startsWith('$2a$') || user.password?.startsWith('$2b$');
      const passwordType = isBcryptHash ? 'üîí bcrypt' : '‚ö†Ô∏è  plain text';
      
      console.log(`${index + 1}. ${user.email}`);
      console.log(`   Username: ${user.username}`);
      console.log(`   –ü–∞—Ä–æ–ª—å: ${passwordType}`);
      console.log(`   –ê–∫—Ç–∏–≤–µ–Ω: ${user.is_active ? '‚úÖ' : '‚ùå'}`);
      console.log(`   ID: ${user.id}`);
      
      if (!isBcryptHash) {
        console.log(`   ‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ü–∞—Ä–æ–ª—å –ù–ï –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω!`);
        console.log(`   –¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å: "${user.password}"`);
      }
      
      console.log('');
    });

    console.log('='.repeat(60));
    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n');

    const usersWithPlainPassword = users.filter((u: any) => {
      const isBcrypt = u.password?.startsWith('$2a$') || u.password?.startsWith('$2b$');
      return !isBcrypt;
    });

    if (usersWithPlainPassword.length > 0) {
      console.log('‚ö†Ô∏è  –£ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ù–ï –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω –ø–∞—Ä–æ–ª—å!');
      console.log('   –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ –ø–∞—Ä–æ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Ö–µ—à–∏—Ä—É–µ—Ç—Å—è.\n');
      
      console.log('üìù –î–ª—è –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:');
      usersWithPlainPassword.forEach((u: any) => {
        console.log(`   Email: ${u.email}`);
        console.log(`   –ü–∞—Ä–æ–ª—å: ${u.password}\n`);
      });
    }

    const inactiveUsers = users.filter((u: any) => !u.is_active);
    if (inactiveUsers.length > 0) {
      console.log('‚ö†Ô∏è  –ù–ï–ê–ö–¢–ò–í–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:');
      inactiveUsers.forEach((u: any) => {
        console.log(`   - ${u.email} (ID: ${u.id})`);
      });
      console.log('   –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:');
      console.log('   npx tsx scripts/activate-user.ts <email>\n');
    }

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', err instanceof Error ? err.message : err);
  }
}

async function createTestUser() {
  console.log('–°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...\n');

  const testEmail = 'admin@example.com';
  const testPassword = 'admin123';
  const testUsername = 'Admin';

  try {
    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const hashedPassword = await bcrypt.hash(testPassword, 10);

    const { data, error } = await supabase
      .from('users')
      .insert([
        {
          email: testEmail,
          username: testUsername,
          password: hashedPassword,
          is_active: true,
          is_online: false,
        }
      ])
      .select()
      .single();

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
      return;
    }

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω!\n');
    console.log('üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
    console.log(`   Email: ${testEmail}`);
    console.log(`   –ü–∞—Ä–æ–ª—å: ${testPassword}`);
    console.log(`   Username: ${testUsername}\n`);

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', err instanceof Error ? err.message : err);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkUser();
