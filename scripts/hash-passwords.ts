/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–¥–∏–Ω —Ä–∞–∑: npx tsx scripts/hash-passwords.ts
 */

import { config } from 'dotenv';
import { createClient } from '@supabase/supabase-js';
import bcrypt from 'bcryptjs';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –û—à–∏–±–∫–∞: NEXT_PUBLIC_SUPABASE_URL –∏–ª–∏ NEXT_PUBLIC_SUPABASE_ANON_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env.local');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function hashPasswords() {
  console.log('üîê –ù–∞—á–∏–Ω–∞–µ–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π...\n');

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { data: users, error } = await supabase
      .from('users')
      .select('id, email, password');

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      return;
    }

    if (!users || users.length === 0) {
      console.log('‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}\n`);

    // 2. –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª–∏
    for (const user of users) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–∞—Ä–æ–ª—å
      const isBcryptHash = user.password.startsWith('$2a$') || user.password.startsWith('$2b$');
      
      if (isBcryptHash) {
        console.log(`‚úÖ ${user.email} - –ø–∞—Ä–æ–ª—å —É–∂–µ –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        continue;
      }

      // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
      const hashedPassword = await bcrypt.hash(user.password, 10);

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ
      const { error: updateError } = await supabase
        .from('users')
        .update({ password: hashedPassword })
        .eq('id', user.id);

      if (updateError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –¥–ª—è ${user.email}:`, updateError);
      } else {
        console.log(`‚úÖ ${user.email} - –ø–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω`);
      }
    }

    console.log('\nüéâ –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å bcrypt –≤ /api/auth/login/route.ts');
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º
hashPasswords();
