/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * npx tsx scripts/reset-password.ts <email> <–Ω–æ–≤—ã–π-–ø–∞—Ä–æ–ª—å>
 */

import { config } from 'dotenv';
import { resolve } from 'path';
import { createClient } from '@supabase/supabase-js';
import bcrypt from 'bcryptjs';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env.local
config({ path: resolve(process.cwd(), '.env.local') });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('\n‚ùå –û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function resetPassword(email: string, newPassword: string) {
  console.log('\nüîê –°–ë–†–û–° –ü–ê–†–û–õ–Ø\n');
  console.log('='.repeat(60));

  try {
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: user, error: findError } = await supabase
      .from('users')
      .select('*')
      .ilike('email', email.toLowerCase().trim())
      .single();

    if (findError || !user) {
      console.error(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email "${email}" –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
      return;
    }

    console.log(`\n‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:`);
    console.log(`   Email: ${user.email}`);
    console.log(`   Username: ${user.username}`);
    console.log(`   ID: ${user.id}\n`);

    // –•–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
    console.log('üîí –•–µ—à–∏—Ä—É—é –ø–∞—Ä–æ–ª—å...');
    const hashedPassword = await bcrypt.hash(newPassword, 10);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
    const { error: updateError } = await supabase
      .from('users')
      .update({ 
        password: hashedPassword,
        is_active: true // –ó–∞–æ–¥–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º, –µ—Å–ª–∏ –±—ã–ª –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω
      })
      .eq('id', user.id);

    if (updateError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è:', updateError.message);
      return;
    }

    console.log('\n‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!\n');
    console.log('üìù –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
    console.log(`   Email: ${user.email}`);
    console.log(`   –ü–∞—Ä–æ–ª—å: ${newPassword}`);
    console.log(`   Username: ${user.username}\n`);

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', err instanceof Error ? err.message : err);
  }
}

// –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const email = process.argv[2];
const newPassword = process.argv[3];

if (!email || !newPassword) {
  console.error('\n‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ email –∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å!\n');
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npx tsx scripts/reset-password.ts <email> <–Ω–æ–≤—ã–π-–ø–∞—Ä–æ–ª—å>\n');
  console.log('–ü—Ä–∏–º–µ—Ä: npx tsx scripts/reset-password.ts user@example.com newpassword123\n');
  process.exit(1);
}

if (newPassword.length < 6) {
  console.error('\n‚ùå –û—à–∏–±–∫–∞: –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤!\n');
  process.exit(1);
}

resetPassword(email, newPassword);
