/**
 * –°–∏—Å—Ç–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ñ–ª–∞–π–Ω-–¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–æ–º
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
 */

import { offlineDB, PendingChange } from './offline-db';
import { supabase } from './supabase';

export type SyncStatus = 'idle' | 'syncing' | 'error';
export type ConflictResolution = 'server-wins' | 'client-wins' | 'last-write-wins';

class SyncQueue {
  private isSyncing = false;
  private syncListeners: Array<(status: SyncStatus) => void> = [];
  private conflictResolution: ConflictResolution = 'last-write-wins';

  constructor() {
    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω
    if (typeof window !== 'undefined') {
      window.addEventListener('online', () => this.syncAll());
      window.addEventListener('offline', () => this.notifyListeners('idle'));
    }
  }

  // === –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ ===

  onSyncStatusChange(callback: (status: SyncStatus) => void) {
    this.syncListeners.push(callback);
    return () => {
      this.syncListeners = this.syncListeners.filter((cb) => cb !== callback);
    };
  }

  private notifyListeners(status: SyncStatus) {
    this.syncListeners.forEach((cb) => cb(status));
  }

  // === –û—Å–Ω–æ–≤–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è ===

  async syncAll(): Promise<void> {
    if (this.isSyncing || !navigator.onLine) return;

    this.isSyncing = true;
    this.notifyListeners('syncing');

    try {
      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...');

      // 1. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
      await this.processPendingChanges();

      // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
      await this.downloadFromServer();

      // 3. –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      await offlineDB.setLastSyncTime();

      console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      this.notifyListeners('idle');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
      this.notifyListeners('error');
    } finally {
      this.isSyncing = false;
    }
  }

  // === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π ===

  private async processPendingChanges(): Promise<void> {
    const changes = await offlineDB.getPendingChanges();
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ${changes.length} –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä...`);

    for (const change of changes) {
      try {
        await this.applyChange(change);
        await offlineDB.removePendingChange(change.id);
        console.log(`‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ ${change.id} –ø—Ä–∏–º–µ–Ω–µ–Ω–æ`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è ${change.id}:`, error);
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        await offlineDB.incrementRetries(change.id);
        
        // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ 5 –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        if (change.retries >= 5) {
          console.warn(`‚ö†Ô∏è –£–¥–∞–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ ${change.id} –ø–æ—Å–ª–µ 5 –ø–æ–ø—ã—Ç–æ–∫`);
          await offlineDB.removePendingChange(change.id);
        }
      }
    }
  }

  private async applyChange(change: PendingChange): Promise<void> {
    const { table, action, data } = change;

    switch (action) {
      case 'create':
        await this.createOnServer(table, data);
        break;
      case 'update':
        await this.updateOnServer(table, data);
        break;
      case 'delete':
        await this.deleteOnServer(table, data.id);
        break;
    }
  }

  private async createOnServer(table: string, data: any): Promise<void> {
    const { error } = await supabase.from(table).insert(data);
    if (error) throw error;
  }

  private async updateOnServer(table: string, data: any): Promise<void> {
    const { id, ...updates } = data;
    const { error } = await supabase.from(table).update(updates).eq('id', id);
    if (error) throw error;
  }

  private async deleteOnServer(table: string, id: string | number): Promise<void> {
    const { error } = await supabase.from(table).delete().eq('id', id);
    if (error) throw error;
  }

  // === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞ ===

  private async downloadFromServer(): Promise<void> {
    console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞...');

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–Ω–¥–µ—Ä—ã
    const { data: tenders, error: tendersError } = await supabase
      .from('tenders')
      .select('*')
      .order('created_at', { ascending: false });

    if (!tendersError && tenders) {
      await offlineDB.saveMany(
        'tenders',
        tenders.map((t) => ({
          id: t.id,
          data: t,
          updated_at: t.updated_at || new Date().toISOString(),
          synced: true,
        }))
      );
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${tenders.length} —Ç–µ–Ω–¥–µ—Ä–æ–≤`);
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
    const { data: suppliers, error: suppliersError } = await supabase
      .from('suppliers')
      .select('*')
      .order('created_at', { ascending: false });

    if (!suppliersError && suppliers) {
      await offlineDB.saveMany(
        'suppliers',
        suppliers.map((s) => ({
          id: s.id,
          data: s,
          updated_at: s.updated_at || new Date().toISOString(),
          synced: true,
        }))
      );
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${suppliers.length} –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤`);
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã
    const { data: expenses, error: expensesError } = await supabase
      .from('expenses')
      .select('*')
      .order('created_at', { ascending: false });

    if (!expensesError && expenses) {
      await offlineDB.saveMany(
        'expenses',
        expenses.map((e) => ({
          id: e.id,
          data: e,
          updated_at: e.updated_at || new Date().toISOString(),
          synced: true,
        }))
      );
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${expenses.length} —Ä–∞—Å—Ö–æ–¥–æ–≤`);
    }
  }

  // === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥—å ===

  async queueCreate(table: 'tenders' | 'suppliers' | 'expenses', data: any): Promise<void> {
    await offlineDB.addPendingChange({
      table,
      action: 'create',
      data,
      timestamp: new Date().toISOString(),
      retries: 0,
    });

    // –ü—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–∞–∑—É –µ—Å–ª–∏ –æ–Ω–ª–∞–π–Ω
    if (navigator.onLine) {
      this.syncAll();
    }
  }

  async queueUpdate(table: 'tenders' | 'suppliers' | 'expenses', data: any): Promise<void> {
    await offlineDB.addPendingChange({
      table,
      action: 'update',
      data,
      timestamp: new Date().toISOString(),
      retries: 0,
    });

    if (navigator.onLine) {
      this.syncAll();
    }
  }

  async queueDelete(table: 'tenders' | 'suppliers' | 'expenses', id: string | number): Promise<void> {
    await offlineDB.addPendingChange({
      table,
      action: 'delete',
      data: { id },
      timestamp: new Date().toISOString(),
      retries: 0,
    });

    if (navigator.onLine) {
      this.syncAll();
    }
  }

  // === –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ ===

  private async resolveConflict(
    localData: any,
    serverData: any
  ): Promise<any> {
    switch (this.conflictResolution) {
      case 'server-wins':
        return serverData;
      
      case 'client-wins':
        return localData;
      
      case 'last-write-wins':
      default:
        const localTime = new Date(localData.updated_at || 0).getTime();
        const serverTime = new Date(serverData.updated_at || 0).getTime();
        return localTime > serverTime ? localData : serverData;
    }
  }

  // === –£—Ç–∏–ª–∏—Ç—ã ===

  async getPendingCount(): Promise<number> {
    const changes = await offlineDB.getPendingChanges();
    return changes.length;
  }

  async clearQueue(): Promise<void> {
    await offlineDB.clear('pending_changes');
  }

  setConflictResolution(strategy: ConflictResolution) {
    this.conflictResolution = strategy;
  }

  isOnline(): boolean {
    return navigator.onLine;
  }

  getStatus(): SyncStatus {
    if (!navigator.onLine) return 'idle';
    return this.isSyncing ? 'syncing' : 'idle';
  }
}

// Singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
export const syncQueue = new SyncQueue();

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
if (typeof window !== 'undefined') {
  window.addEventListener('load', () => {
    if (navigator.onLine) {
      setTimeout(() => syncQueue.syncAll(), 2000);
    }
  });
}
