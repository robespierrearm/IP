import { createClient } from '@supabase/supabase-js';

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '8461717103:AAEZl4hs5oXaOtnCsKNexcVGCPdjeG4RvkA';
const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const SUPABASE_ANON_KEY = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendTelegramMessage(chatId: string, text: string, options: any = {}) {
  try {
    const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
    
    console.log('üìû –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ Telegram API:');
    console.log('  URL:', url.replace(TELEGRAM_BOT_TOKEN, 'BOT_TOKEN'));
    console.log('  chat_id:', chatId);
    console.log('  text:', text.substring(0, 50) + '...');
    
    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text,
        parse_mode: 'HTML',
        ...options,
      }),
    });

    const result = await response.json();
    
    console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç Telegram API:');
    console.log('  Status:', response.status);
    console.log('  Result:', result);
    
    if (!result.ok) {
      console.error('‚ùå Telegram API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:', result);
    } else {
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!');
    }
    
    return result;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:', error);
    throw error;
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
function formatPrice(price: number): string {
  return new Intl.NumberFormat('ru-RU', {
    minimumFractionDigits: 0,
    maximumFractionDigits: 0,
  }).format(price) + ' ‚ÇΩ';
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
function formatDate(dateString: string): string {
  const date = new Date(dateString);
  return date.toLocaleDateString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
  });
}

// –ü–æ–¥—Å—á—ë—Ç –¥–Ω–µ–π –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
function getDaysUntilDeadline(deadlineString: string): number {
  const deadline = new Date(deadlineString);
  const now = new Date();
  const diffTime = deadline.getTime() - now.getTime();
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  return diffDays;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ "–æ—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π"
function formatDaysLeft(days: number): string {
  if (days > 1) return `—á–µ—Ä–µ–∑ ${days} –¥–Ω–µ–π`;
  if (days === 1) return '–∑–∞–≤—Ç—Ä–∞';
  if (days === 0) return '<b>—Å–µ–≥–æ–¥–Ω—è!</b>';
  if (days === -1) return '<b>–≤—á–µ—Ä–∞ (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ!)</b>';
  return `<b>–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ ${Math.abs(days)} –¥–Ω–µ–π!</b>`;
}

// –ü–æ–¥—Å—á—ë—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —ç–∫–æ–Ω–æ–º–∏–∏
function calculateSavings(startPrice: number, submittedPrice: number): { amount: number; percent: number } {
  const amount = startPrice - submittedPrice;
  const percent = (amount / startPrice) * 100;
  return { amount, percent };
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏–∑ –ë–î
async function getTenderExpenses(tenderId: number): Promise<number> {
  try {
    const { data: expenses } = await supabase
      .from('expenses')
      .select('amount')
      .eq('tender_id', tenderId);
    
    if (!expenses || expenses.length === 0) return 0;
    
    return expenses.reduce((sum, exp) => sum + (exp.amount || 0), 0);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤:', error);
    return 0;
  }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Ç–µ–Ω–¥–µ—Ä–µ
export async function notifyNewTender(tender: any) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const { data: settings } = await supabase
      .from('telegram_notification_settings')
      .select('*')
      .eq('id', 1)
      .single();

    if (!settings || !settings.notify_new_tender || settings.recipients.length === 0) {
      return;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = `<b>üÜï –ù–æ–≤—ã–π —Ç–µ–Ω–¥–µ—Ä</b>\n\n`;
    message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
    message += `<b>üìå ${tender.name}</b>\n\n`;
    
    if (tender.start_price) {
      message += `üí∞ –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: <code>${formatPrice(tender.start_price)}</code>\n`;
    }
    
    if (tender.region) {
      message += `üìç –†–µ–≥–∏–æ–Ω: ${tender.region}\n`;
    }
    
    if (tender.submission_deadline) {
      const daysLeft = getDaysUntilDeadline(tender.submission_deadline);
      message += `‚è∞ –î–µ–¥–ª–∞–π–Ω: ${formatDate(tender.submission_deadline)}\n`;
      message += `‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: ${formatDaysLeft(daysLeft)}\n`;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º
    const sendPromises = settings.recipients.map((telegramId: string) =>
      sendTelegramMessage(telegramId, message, {
        reply_markup: {
          inline_keyboard: [[
            { text: 'üåê –û—Ç–∫—Ä—ã—Ç—å –≤ CRM', url: `https://ip-mauve-pi.vercel.app/tenders` }
          ]]
        }
      })
    );

    await Promise.all(sendPromises);
    console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Ç–µ–Ω–¥–µ—Ä–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
  }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–µ
export async function notifyTenderWon(tender: any) {
  try {
    console.log('üéâ notifyTenderWon –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è:', tender?.name);
    
    const { data: settings } = await supabase
      .from('telegram_notification_settings')
      .select('*')
      .eq('id', 1)
      .single();

    console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–±–µ–¥—ã:', settings);

    if (!settings) {
      console.log('‚ùå –ù–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç!');
      return;
    }

    if (!settings.notify_won) {
      console.log('‚ùå –ì–∞–ª–æ—á–∫–∞ "–ü–æ–±–µ–¥–∞" –≤—ã–∫–ª—é—á–µ–Ω–∞!');
      return;
    }

    if (settings.recipients.length === 0) {
      console.log('‚ùå –ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π!');
      return;
    }

    console.log('üë• –û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ–±–µ–¥—É –¥–ª—è:', settings.recipients);

    let message = `<b>üéâüéâüéâ –ü–û–ë–ï–î–ê! üéâüéâüéâ</b>\n\n`;
    message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
    message += `<b>‚úÖ ${tender.name}</b>\n\n`;
    
    const winPrice = tender.win_price || tender.submitted_price;
    
    if (winPrice) {
      message += `üí∞ –°—É–º–º–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: <code>${formatPrice(winPrice)}</code>\n`;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫–æ–Ω–æ–º–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
    if (tender.start_price && winPrice && winPrice < tender.start_price) {
      const savings = calculateSavings(tender.start_price, winPrice);
      message += `<b>üìä –≠–∫–æ–Ω–æ–º–∏—è: ${formatPrice(savings.amount)}</b> (-${savings.percent.toFixed(1)}%)\n`;
    }
    
    message += `\nüî• –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! üî•`;

    console.log('üì® –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:', message);

    const sendPromises = settings.recipients.map((telegramId: string) => {
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ telegram_id:', telegramId);
      return sendTelegramMessage(telegramId, message, {
        reply_markup: {
          inline_keyboard: [[
            { text: 'üåê –û—Ç–∫—Ä—ã—Ç—å –≤ CRM', url: `https://ip-mauve-pi.vercel.app/tenders` }
          ]]
        }
      });
    });

    await Promise.all(sendPromises);
    console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–±–µ–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
  }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
export async function notifyTenderLost(tender: any) {
  try {
    const { data: settings } = await supabase
      .from('telegram_notification_settings')
      .select('*')
      .eq('id', 1)
      .single();

    if (!settings || !settings.notify_lost || settings.recipients.length === 0) {
      return;
    }

    let message = `<b>üòî –ù–µ –≤—ã–∏–≥—Ä–∞–ª–∏ —Ç–µ–Ω–¥–µ—Ä</b>\n\n`;
    message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
    message += `<b>üìå ${tender.name}</b>\n\n`;
    
    if (tender.submitted_price) {
      message += `üí∏ –ù–∞—à–∞ —Ü–µ–Ω–∞: <code>${formatPrice(tender.submitted_price)}</code>\n\n`;
    }
    
    message += `–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å!\n–í–ø–µ—Ä–µ–¥–∏ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ üí™`;

    const sendPromises = settings.recipients.map((telegramId: string) =>
      sendTelegramMessage(telegramId, message)
    );

    await Promise.all(sendPromises);
    console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–∏–≥—Ä—ã—à–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
  }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
export async function notifyStatusChange(tender: any, oldStatus: string, newStatus: string) {
  try {
    console.log('üì® notifyStatusChange –≤—ã–∑–≤–∞–Ω–∞');
    console.log('  –¢–µ–Ω–¥–µ—Ä:', tender?.name);
    console.log('  –°—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å:', oldStatus);
    console.log('  –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:', newStatus);
    
    const { data: settings } = await supabase
      .from('telegram_notification_settings')
      .select('*')
      .eq('id', 1)
      .single();

    console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', settings);

    if (!settings) {
      console.log('‚ùå –ù–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç!');
      return;
    }

    if (settings.recipients.length === 0) {
      console.log('‚ùå –ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π!');
      return;
    }

    console.log('üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–∏:', settings.recipients);

    // –ü–†–ò–û–†–ò–¢–ï–¢ 1: –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ü–æ–±–µ–¥–∞/–ü—Ä–æ–∏–≥—Ä—ã—à)
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≥–∞–ª–æ—á–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
    if (newStatus === '–ø–æ–±–µ–¥–∞' && settings.notify_won) {
      console.log('üéâ –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ü–û–ë–ï–î–ï');
      return notifyTenderWon(tender);
    }
    
    if (newStatus === '–ø—Ä–æ–∏–≥—Ä—ã—à' && settings.notify_lost) {
      console.log('üòî –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ü–†–û–ò–ì–†–´–®–ï');
      return notifyTenderLost(tender);
    }

    console.log('üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –≥–∞–ª–æ—á–∫—É "–î—Ä—É–≥–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è":', settings.notify_status_change);

    // –ü–†–ò–û–†–ò–¢–ï–¢ 2: –û–±—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    // –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –≥–∞–ª–æ—á–∫–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é
    if (!settings.notify_status_change) {
      console.log('‚ùå –ì–∞–ª–æ—á–∫–∞ "–î—Ä—É–≥–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è" –≤—ã–∫–ª—é—á–µ–Ω–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é');
      return; // –û–±—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞:', newStatus);
    
    let message = '';
    
    // –£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    if (newStatus === '–ø–æ–¥–∞–Ω–æ') {
      message = `<b>üì§ –ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞!</b>\n\n`;
      message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
      message += `<b>üìå ${tender.name}</b>\n\n`;
      
      if (tender.start_price && tender.submitted_price) {
        const savings = calculateSavings(tender.start_price, tender.submitted_price);
        message += `üíµ –ù–∞—á–∞–ª—å–Ω–∞—è: <code>${formatPrice(tender.start_price)}</code>\n`;
        message += `üí∏ –ù–∞—à–∞ —Ü–µ–Ω–∞: <code>${formatPrice(tender.submitted_price)}</code>\n`;
        message += `<b>üìä –≠–∫–æ–Ω–æ–º–∏—è: ${formatPrice(savings.amount)}</b> (-${savings.percent.toFixed(1)}%)\n\n`;
      } else if (tender.submitted_price) {
        message += `üí∏ –ù–∞—à–∞ —Ü–µ–Ω–∞: <code>${formatPrice(tender.submitted_price)}</code>\n\n`;
      }
      
      if (tender.submission_deadline) {
        const daysLeft = getDaysUntilDeadline(tender.submission_deadline);
        message += `‚è∞ –î–µ–¥–ª–∞–π–Ω: ${formatDate(tender.submission_deadline)} (${formatDaysLeft(daysLeft)})\n\n`;
      }
      
      message += `–ñ–¥—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤! ü§û`;
      
    } else if (newStatus === '–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏') {
      message = `<b>üîç –¢–µ–Ω–¥–µ—Ä –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏</b>\n\n`;
      message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
      message += `<b>üìå ${tender.name}</b>\n\n`;
      
      if (tender.submission_date) {
        message += `üìÖ –ü–æ–¥–∞–Ω–æ: ${formatDate(tender.submission_date)}\n`;
      }
      
      if (tender.submission_deadline) {
        const daysLeft = getDaysUntilDeadline(tender.submission_deadline);
        message += `‚è∞ –î–µ–¥–ª–∞–π–Ω: ${formatDate(tender.submission_deadline)} (${formatDaysLeft(daysLeft)})\n`;
      }
      
      if (tender.submitted_price) {
        message += `üí∏ –ù–∞—à–∞ —Ü–µ–Ω–∞: <code>${formatPrice(tender.submitted_price)}</code>\n`;
      }
      
      message += `\n–û–∂–∏–¥–∞–µ–º —Ä–µ—à–µ–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫–∞...`;
      
    } else if (newStatus === '–≤ —Ä–∞–±–æ—Ç–µ') {
      message = `<b>‚öôÔ∏è –†–∞–±–æ—Ç—ã –Ω–∞—á–∞–ª–∏—Å—å</b>\n\n`;
      message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
      message += `<b>üìå ${tender.name}</b>\n\n`;
      
      const contractPrice = tender.win_price || tender.submitted_price;
      if (contractPrice) {
        message += `üí∞ –°—É–º–º–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: <code>${formatPrice(contractPrice)}</code>\n`;
      }
      
      if (tender.submission_date) {
        message += `üìÖ –ù–∞—á–∞–ª–æ: ${formatDate(tender.submission_date)}\n`;
      }
      
      message += `\n–£–¥–∞—á–∏ –∫–æ–º–∞–Ω–¥–µ! üöÄ`;
      
    } else if (newStatus === '–∑–∞–≤–µ—Ä—à—ë–Ω') {
      message = `<b>‚úÖ –ü—Ä–æ–µ–∫—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!</b>\n\n`;
      message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
      message += `<b>üìå ${tender.name}</b>\n\n`;
      
      const contractPrice = tender.win_price || tender.submitted_price;
      if (contractPrice) {
        message += `üí∞ –ö–æ–Ω—Ç—Ä–∞–∫—Ç: <code>${formatPrice(contractPrice)}</code>\n`;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∏–∑ –ë–î
        if (tender.id) {
          const expenses = await getTenderExpenses(tender.id);
          if (expenses > 0) {
            const profit = contractPrice - expenses;
            const profitPercent = (profit / contractPrice) * 100;
            message += `üí∏ –†–∞—Å—Ö–æ–¥—ã: <code>${formatPrice(expenses)}</code>\n`;
            message += `<b>üíµ –ü—Ä–∏–±—ã–ª—å: ${formatPrice(profit)}</b> (${profitPercent.toFixed(1)}%)\n`;
          }
        }
      }
      
      message += `\nüéä –û–¢–õ–ò–ß–ù–ê–Ø –†–ê–ë–û–¢–ê! üéä`;
      
    } else {
      // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ - –æ–±—ã—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      message = `<b>üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞</b>\n\n`;
      message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
      message += `<b>üìå ${tender.name}</b>\n\n`;
      message += `–ë—ã–ª–æ: ${oldStatus}\n`;
      message += `–°—Ç–∞–ª–æ: <b>${newStatus}</b>`;
    }

    const sendPromises = settings.recipients.map((telegramId: string) =>
      sendTelegramMessage(telegramId, message, {
        reply_markup: {
          inline_keyboard: [[
            { text: 'üåê –û—Ç–∫—Ä—ã—Ç—å –≤ CRM', url: `https://ip-mauve-pi.vercel.app/tenders` }
          ]]
        }
      })
    );

    await Promise.all(sendPromises);
    console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
  }
}
