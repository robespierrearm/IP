import { createClient } from '@supabase/supabase-js';

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '8461717103:AAEZl4hs5oXaOtnCsKNexcVGCPdjeG4RvkA';
const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const SUPABASE_ANON_KEY = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendTelegramMessage(chatId: string, text: string, options: any = {}) {
  try {
    const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
    
    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text,
        parse_mode: 'HTML',
        ...options,
      }),
    });

    return await response.json();
  } catch (error) {
    console.error('Error sending Telegram message:', error);
    throw error;
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
function formatPrice(price: number): string {
  return new Intl.NumberFormat('ru-RU', {
    style: 'currency',
    currency: 'RUB',
    maximumFractionDigits: 0,
  }).format(price);
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
function formatDate(dateString: string): string {
  const date = new Date(dateString);
  return date.toLocaleDateString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
  });
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Ç–µ–Ω–¥–µ—Ä–µ
export async function notifyNewTender(tender: any) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const { data: settings } = await supabase
      .from('telegram_notification_settings')
      .select('*')
      .eq('id', 1)
      .single();

    if (!settings || !settings.notify_new_tender || settings.recipients.length === 0) {
      return; // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã –∏–ª–∏ –Ω–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = `üìã <b>–ù–æ–≤—ã–π —Ç–µ–Ω–¥–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n`;
    message += `‚úÖ <b>${tender.name}</b>\n\n`;
    
    if (tender.purchase_number) {
      message += `üìù –ù–æ–º–µ—Ä: ${tender.purchase_number}\n`;
    }
    
    if (tender.region) {
      message += `üìç –†–µ–≥–∏–æ–Ω: ${tender.region}\n`;
    }
    
    if (tender.start_price) {
      message += `üí∞ –¶–µ–Ω–∞: ${formatPrice(tender.start_price)}\n`;
    }
    
    if (tender.submission_deadline) {
      message += `‚è∞ –î–µ–¥–ª–∞–π–Ω: ${formatDate(tender.submission_deadline)}\n`;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º
    const sendPromises = settings.recipients.map((telegramId: string) =>
      sendTelegramMessage(telegramId, message, {
        reply_markup: {
          inline_keyboard: [[
            { text: 'üåê –û—Ç–∫—Ä—ã—Ç—å –≤ CRM', url: `https://ip-mauve-pi.vercel.app/tenders` }
          ]]
        }
      })
    );

    await Promise.all(sendPromises);
    console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Ç–µ–Ω–¥–µ—Ä–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
  }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–µ
export async function notifyTenderWon(tender: any) {
  try {
    const { data: settings } = await supabase
      .from('telegram_notification_settings')
      .select('*')
      .eq('id', 1)
      .single();

    if (!settings || !settings.notify_won || settings.recipients.length === 0) {
      return;
    }

    let message = `üéâ <b>–ü–û–ë–ï–î–ê –í –¢–ï–ù–î–ï–†–ï!</b>\n\n`;
    message += `‚úÖ <b>${tender.name}</b>\n\n`;
    
    if (tender.win_price) {
      message += `üí∞ –°—É–º–º–∞: ${formatPrice(tender.win_price)}\n`;
    }

    const sendPromises = settings.recipients.map((telegramId: string) =>
      sendTelegramMessage(telegramId, message, {
        reply_markup: {
          inline_keyboard: [[
            { text: 'üåê –û—Ç–∫—Ä—ã—Ç—å –≤ CRM', url: `https://ip-mauve-pi.vercel.app/tenders` }
          ]]
        }
      })
    );

    await Promise.all(sendPromises);
    console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–±–µ–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
  }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
export async function notifyTenderLost(tender: any) {
  try {
    const { data: settings } = await supabase
      .from('telegram_notification_settings')
      .select('*')
      .eq('id', 1)
      .single();

    if (!settings || !settings.notify_lost || settings.recipients.length === 0) {
      return;
    }

    let message = `üòî <b>–ü—Ä–æ–∏–≥—Ä—ã—à –≤ —Ç–µ–Ω–¥–µ—Ä–µ</b>\n\n`;
    message += `${tender.name}\n\n`;
    message += `–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, –≤–ø–µ—Ä–µ–¥–∏ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!`;

    const sendPromises = settings.recipients.map((telegramId: string) =>
      sendTelegramMessage(telegramId, message)
    );

    await Promise.all(sendPromises);
    console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–∏–≥—Ä—ã—à–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
  }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
export async function notifyStatusChange(tender: any, oldStatus: string, newStatus: string) {
  try {
    const { data: settings } = await supabase
      .from('telegram_notification_settings')
      .select('*')
      .eq('id', 1)
      .single();

    if (!settings || !settings.notify_status_change || settings.recipients.length === 0) {
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–±–µ–¥—É –∏–ª–∏ –ø—Ä–æ–∏–≥—Ä—ã—à
    if (newStatus === '–ø–æ–±–µ–¥–∞' && settings.notify_won) {
      return notifyTenderWon(tender);
    }
    
    if (newStatus === '–ø—Ä–æ–∏–≥—Ä—ã—à' && settings.notify_lost) {
      return notifyTenderLost(tender);
    }

    // –û–±—ã—á–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    let message = `üîÑ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–Ω–¥–µ—Ä–∞</b>\n\n`;
    message += `${tender.name}\n\n`;
    message += `–ë—ã–ª–æ: ${oldStatus}\n`;
    message += `–°—Ç–∞–ª–æ: <b>${newStatus}</b>`;

    const sendPromises = settings.recipients.map((telegramId: string) =>
      sendTelegramMessage(telegramId, message)
    );

    await Promise.all(sendPromises);
    console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
  }
}
