/**
 * –û—Ñ–ª–∞–π–Ω-–æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è Supabase
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç IndexedDB –∫–æ–≥–¥–∞ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
 */

import { offlineDB, OfflineData } from './offline-db';
import { syncQueue } from './sync-queue';
import { supabase, Tender, Supplier, Expense } from './supabase';

type TableName = 'tenders' | 'suppliers' | 'expenses';

export class OfflineSupabase {
  private isOnline = typeof navigator !== 'undefined' ? navigator.onLine : true;
  private initialized = false;
  private preloadAttempted = false;

  constructor() {
    if (typeof window !== 'undefined') {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º IndexedDB —Å—Ä–∞–∑—É
      this.initializeDB();
      
      window.addEventListener('online', () => {
        this.isOnline = true;
        console.log('üü¢ –û–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (typeof window !== 'undefined' && (window as any).toast) {
          (window as any).toast.success('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', {
            description: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...'
          });
        }
        
        // –ü—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º
        syncQueue.syncAll().catch(console.error);
      });
      
      window.addEventListener('offline', () => {
        this.isOnline = false;
        console.log('üî¥ –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (typeof window !== 'undefined' && (window as any).toast) {
          (window as any).toast.error('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É', {
            description: '–†–∞–±–æ—Ç–∞–µ–º –≤ –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ'
          });
        }
      });
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è IndexedDB
   * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
   */
  private async initializeDB() {
    try {
      await offlineDB.init();
      this.initialized = true;
      console.log('‚úÖ IndexedDB –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      
      // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
      if (this.isOnline && !this.preloadAttempted) {
        this.preloadData();
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ IndexedDB:', error);
      this.initialized = false;
    }
  }

  /**
   * –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ–Ω–µ
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ IndexedDB
   */
  private async preloadData() {
    if (this.preloadAttempted) return;
    this.preloadAttempted = true;

    try {
      console.log('üì• –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞...');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      await Promise.allSettled([
        this.getTenders(),
        this.getSuppliers(),
        this.getExpenses(),
      ]);
      
      console.log('‚úÖ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏:', error);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ IndexedDB
   * –ï—Å–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - –ø—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
   */
  private async ensureInitialized(): Promise<void> {
    if (!this.initialized) {
      await this.initializeDB();
    }
    if (!this.initialized) {
      throw new Error('IndexedDB –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
    }
  }

  // === SELECT (—á—Ç–µ–Ω–∏–µ) ===

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ–Ω–¥–µ—Ä–æ–≤
   * –°—Ç—Ä–∞—Ç–µ–≥–∏—è: Network First —Å fallback –Ω–∞ IndexedDB
   */
  async getTenders(): Promise<Tender[]> {
    await this.ensureInitialized();

    try {
      const { data, error } = await supabase
        .from('tenders')
        .select('*')
        .order('created_at', { ascending: false });

      if (!error && data) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ IndexedDB
        await offlineDB.saveMany(
          'tenders',
          data.map((t) => ({
            id: t.id,
            data: t,
            updated_at: t.updated_at || new Date().toISOString(),
            synced: true,
          }))
        );
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.length} —Ç–µ–Ω–¥–µ—Ä–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞`);
        return data;
      }
    } catch (error) {
      console.log('üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à —Ç–µ–Ω–¥–µ—Ä–æ–≤ (–æ—Ñ–ª–∞–π–Ω)');
    }

    // –û—Ñ–ª–∞–π–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ - –±–µ—Ä—ë–º –∏–∑ IndexedDB
    const cached = await offlineDB.getAll<Tender>('tenders');
    const tenders = cached.map((item: any) => item.data).filter((t: any) => !(t as any).deleted);
    console.log(`üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${tenders.length} —Ç–µ–Ω–¥–µ—Ä–æ–≤ –∏–∑ –∫—ç—à–∞`);
    return tenders;
  }

  async getSuppliers(): Promise<Supplier[]> {
    try {
      const { data, error } = await supabase
        .from('suppliers')
        .select('*')
        .order('created_at', { ascending: false });

      if (!error && data) {
        await offlineDB.saveMany(
          'suppliers',
          data.map((s) => ({
            id: s.id,
            data: s,
            updated_at: s.updated_at || new Date().toISOString(),
            synced: true,
          }))
        );
        return data;
      }
    } catch (error) {
      console.log('üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ (–æ—Ñ–ª–∞–π–Ω)');
    }

    const cached = await offlineDB.getAll<Supplier>('suppliers');
    return cached.map((item: any) => item.data).filter((s: any) => !(s as any).deleted);
  }

  async getExpenses(): Promise<Expense[]> {
    try {
      const { data, error } = await supabase
        .from('expenses')
        .select('*')
        .order('created_at', { ascending: false });

      if (!error && data) {
        await offlineDB.saveMany(
          'expenses',
          data.map((e) => ({
            id: e.id,
            data: e,
            updated_at: e.updated_at || new Date().toISOString(),
            synced: true,
          }))
        );
        return data;
      }
    } catch (error) {
      console.log('üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à —Ä–∞—Å—Ö–æ–¥–æ–≤ (–æ—Ñ–ª–∞–π–Ω)');
    }

    const cached = await offlineDB.getAll<Expense>('expenses');
    return cached.map((item: any) => item.data).filter((e: any) => !(e as any).deleted);
  }

  // === INSERT (—Å–æ–∑–¥–∞–Ω–∏–µ) ===

  async createTender(tender: Partial<Tender>): Promise<Tender | null> {
    console.log('üìù createTender –≤—ã–∑–≤–∞–Ω:', { tender, isOnline: this.isOnline });
    
    const newTender = {
      ...tender,
      id: tender.id || Date.now(), // –í—Ä–µ–º–µ–Ω–Ω—ã–π ID –¥–ª—è –æ—Ñ–ª–∞–π–Ω–∞
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
    } as Tender;

    if (this.isOnline) {
      try {
        const { data, error } = await supabase
          .from('tenders')
          .insert(tender)
          .select()
          .single();

        if (!error && data) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ IndexedDB
          await offlineDB.save('tenders', {
            id: data.id,
            data,
            updated_at: data.updated_at || new Date().toISOString(),
            synced: true,
          });
          console.log('‚úÖ –¢–µ–Ω–¥–µ—Ä —Å–æ–∑–¥–∞–Ω –æ–Ω–ª–∞–π–Ω:', data);
          return data;
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–Ω–¥–µ—Ä–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ñ–ª–∞–π–Ω');
      }
    }

    // –û—Ñ–ª–∞–π–Ω - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–Ω–¥–µ—Ä –æ—Ñ–ª–∞–π–Ω:', newTender);
    await offlineDB.save('tenders', {
      id: newTender.id,
      data: newTender,
      updated_at: newTender.updated_at,
      synced: false,
    });

    await syncQueue.queueCreate('tenders', newTender);
    console.log('‚úÖ –¢–µ–Ω–¥–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω –æ—Ñ–ª–∞–π–Ω');
    return newTender;
  }

  async createSupplier(supplier: Partial<Supplier>): Promise<Supplier | null> {
    console.log('üìù createSupplier –≤—ã–∑–≤–∞–Ω:', { supplier, isOnline: this.isOnline });
    
    const newSupplier = {
      ...supplier,
      id: supplier.id || Date.now(),
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
    } as Supplier;

    if (this.isOnline) {
      try {
        const { data, error } = await supabase
          .from('suppliers')
          .insert(supplier)
          .select()
          .single();

        if (!error && data) {
          await offlineDB.save('suppliers', {
            id: data.id,
            data,
            updated_at: data.updated_at || new Date().toISOString(),
            synced: true,
          });
          console.log('‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫ —Å–æ–∑–¥–∞–Ω –æ–Ω–ª–∞–π–Ω:', data);
          return data;
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ñ–ª–∞–π–Ω');
      }
    }

    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –æ—Ñ–ª–∞–π–Ω:', newSupplier);
    await offlineDB.save('suppliers', {
      id: newSupplier.id,
      data: newSupplier,
      updated_at: newSupplier.updated_at,
      synced: false,
    });

    await syncQueue.queueCreate('suppliers', newSupplier);
    console.log('‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –æ—Ñ–ª–∞–π–Ω');
    return newSupplier;
  }

  async createExpense(expense: Partial<Expense>): Promise<Expense | null> {
    const newExpense = {
      ...expense,
      id: expense.id || Date.now(),
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
    } as Expense;

    if (this.isOnline) {
      try {
        const { data, error } = await supabase
          .from('expenses')
          .insert(expense)
          .select()
          .single();

        if (!error && data) {
          await offlineDB.save('expenses', {
            id: data.id,
            data,
            updated_at: data.updated_at || new Date().toISOString(),
            synced: true,
          });
          return data;
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ñ–ª–∞–π–Ω');
      }
    }

    await offlineDB.save('expenses', {
      id: newExpense.id,
      data: newExpense,
      updated_at: newExpense.updated_at,
      synced: false,
    });

    await syncQueue.queueCreate('expenses', newExpense);
    return newExpense;
  }

  // === UPDATE (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ) ===

  async updateTender(id: number, updates: Partial<Tender>): Promise<Tender | null> {
    const updatedData = {
      ...updates,
      id,
      updated_at: new Date().toISOString(),
    };

    if (this.isOnline) {
      try {
        const { data, error } = await supabase
          .from('tenders')
          .update(updates)
          .eq('id', id)
          .select()
          .single();

        if (!error && data) {
          await offlineDB.save('tenders', {
            id: data.id,
            data,
            updated_at: data.updated_at || new Date().toISOString(),
            synced: true,
          });
          return data;
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–Ω–¥–µ—Ä–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ñ–ª–∞–π–Ω');
      }
    }

    // –û—Ñ–ª–∞–π–Ω - –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
    const existing = await offlineDB.getById<Tender>('tenders', id);
    if (existing) {
      const merged = { ...existing.data, ...updatedData };
      await offlineDB.save('tenders', {
        id,
        data: merged,
        updated_at: updatedData.updated_at,
        synced: false,
      });

      await syncQueue.queueUpdate('tenders', merged);
      return merged;
    }

    return null;
  }

  async updateSupplier(id: number, updates: Partial<Supplier>): Promise<Supplier | null> {
    const updatedData = {
      ...updates,
      id,
      updated_at: new Date().toISOString(),
    };

    if (this.isOnline) {
      try {
        const { data, error } = await supabase
          .from('suppliers')
          .update(updates)
          .eq('id', id)
          .select()
          .single();

        if (!error && data) {
          await offlineDB.save('suppliers', {
            id: data.id,
            data,
            updated_at: data.updated_at || new Date().toISOString(),
            synced: true,
          });
          return data;
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ñ–ª–∞–π–Ω');
      }
    }

    const existing = await offlineDB.getById<Supplier>('suppliers', id);
    if (existing) {
      const merged = { ...existing.data, ...updatedData };
      await offlineDB.save('suppliers', {
        id,
        data: merged,
        updated_at: updatedData.updated_at,
        synced: false,
      });

      await syncQueue.queueUpdate('suppliers', merged);
      return merged;
    }

    return null;
  }

  async updateExpense(id: number, updates: Partial<Expense>): Promise<Expense | null> {
    const updatedData = {
      ...updates,
      id,
      updated_at: new Date().toISOString(),
    };

    if (this.isOnline) {
      try {
        const { data, error } = await supabase
          .from('expenses')
          .update(updates)
          .eq('id', id)
          .select()
          .single();

        if (!error && data) {
          await offlineDB.save('expenses', {
            id: data.id,
            data,
            updated_at: data.updated_at || new Date().toISOString(),
            synced: true,
          });
          return data;
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ñ–ª–∞–π–Ω');
      }
    }

    const existing = await offlineDB.getById<Expense>('expenses', id);
    if (existing) {
      const merged = { ...existing.data, ...updatedData };
      await offlineDB.save('expenses', {
        id,
        data: merged,
        updated_at: updatedData.updated_at,
        synced: false,
      });

      await syncQueue.queueUpdate('expenses', merged);
      return merged;
    }

    return null;
  }

  // === DELETE (—É–¥–∞–ª–µ–Ω–∏–µ) ===

  async deleteTender(id: number): Promise<boolean> {
    if (this.isOnline) {
      try {
        const { error } = await supabase.from('tenders').delete().eq('id', id);

        if (!error) {
          await offlineDB.delete('tenders', id);
          return true;
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–Ω–¥–µ—Ä–∞, –ø–æ–º–µ—á–∞–µ–º –æ—Ñ–ª–∞–π–Ω');
      }
    }

    // –û—Ñ–ª–∞–π–Ω - –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–¥–∞–ª—ë–Ω–Ω—ã–π
    const existing = await offlineDB.getById<Tender>('tenders', id);
    if (existing) {
      (existing.data as any).deleted = true;
      existing.synced = false;
      await offlineDB.save('tenders', existing);
      await syncQueue.queueDelete('tenders', id);
    }

    return true;
  }

  async deleteSupplier(id: number): Promise<boolean> {
    if (this.isOnline) {
      try {
        const { error } = await supabase.from('suppliers').delete().eq('id', id);

        if (!error) {
          await offlineDB.delete('suppliers', id);
          return true;
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞, –ø–æ–º–µ—á–∞–µ–º –æ—Ñ–ª–∞–π–Ω');
      }
    }

    const existing = await offlineDB.getById<Supplier>('suppliers', id);
    if (existing) {
      (existing.data as any).deleted = true;
      existing.synced = false;
      await offlineDB.save('suppliers', existing);
      await syncQueue.queueDelete('suppliers', id);
    }

    return true;
  }

  async deleteExpense(id: number): Promise<boolean> {
    if (this.isOnline) {
      try {
        const { error } = await supabase.from('expenses').delete().eq('id', id);

        if (!error) {
          await offlineDB.delete('expenses', id);
          return true;
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞, –ø–æ–º–µ—á–∞–µ–º –æ—Ñ–ª–∞–π–Ω');
      }
    }

    const existing = await offlineDB.getById<Expense>('expenses', id);
    if (existing) {
      (existing.data as any).deleted = true;
      existing.synced = false;
      await offlineDB.save('expenses', existing);
      await syncQueue.queueDelete('expenses', id);
    }

    return true;
  }

  // === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
   */
  async getPendingChangesCount(): Promise<number> {
    return await syncQueue.getPendingCount();
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
   */
  async syncNow(): Promise<void> {
    if (!this.isOnline) {
      throw new Error('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
    }
    await syncQueue.syncAll();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω
   */
  getOnlineStatus(): boolean {
    return this.isOnline;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
   */
  async clearAllData(): Promise<void> {
    await this.ensureInitialized();
    await Promise.all([
      offlineDB.clear('tenders'),
      offlineDB.clear('suppliers'),
      offlineDB.clear('expenses'),
      offlineDB.clear('pending_changes'),
    ]);
    console.log('üóëÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
   */
  async getCacheStats(): Promise<{
    tenders: number;
    suppliers: number;
    expenses: number;
    pendingChanges: number;
  }> {
    await this.ensureInitialized();
    
    const [tenders, suppliers, expenses, pending] = await Promise.all([
      offlineDB.getAll('tenders'),
      offlineDB.getAll('suppliers'),
      offlineDB.getAll('expenses'),
      offlineDB.getPendingChanges(),
    ]);

    return {
      tenders: tenders.length,
      suppliers: suppliers.length,
      expenses: expenses.length,
      pendingChanges: pending.length,
    };
  }
}

// Singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
export const offlineSupabase = new OfflineSupabase();
