'use client';

import { useEffect, useState } from 'react';
import { supabase } from '@/lib/supabase';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Copy, RefreshCw, Trash2, CheckCircle, Send } from 'lucide-react';

interface TelegramConnection {
  id: number;
  user_id: number;
  telegram_id: string;
  telegram_username: string | null;
  telegram_first_name: string | null;
  auth_code: string | null;
  is_active: boolean;
  connected_at: string;
}

interface TelegramPanelProps {
  isActive?: boolean;
}

export function TelegramPanel({ isActive = true }: TelegramPanelProps) {
  const [connections, setConnections] = useState<TelegramConnection[]>([]);
  const [authCode, setAuthCode] = useState<string>('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [copied, setCopied] = useState(false);

  useEffect(() => {
    if (isActive) {
      loadConnections();
    }
  }, [isActive]);

  const loadConnections = async () => {
    setIsLoading(true);
    const { data, error } = await supabase
      .from('telegram_connections')
      .select('*')
      .order('connected_at', { ascending: false });

    if (!error && data) {
      setConnections(data);
    }
    setIsLoading(false);
  };

  const generateCode = async () => {
    setIsGenerating(true);
    
    try {
      const currentUser = JSON.parse(localStorage.getItem('currentUser') || '{}');
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥
      const code = `TG-${Math.random().toString(36).substring(2, 6).toUpperCase()}-${Math.random().toString(36).substring(2, 6).toUpperCase()}`;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –ë–î
      const { data, error } = await supabase
        .from('telegram_connections')
        .insert([{
          user_id: currentUser.id,
          auth_code: code,
          is_active: false,
        }])
        .select()
        .single();

      if (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞:', error);
        alert('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞');
        return;
      }

      setAuthCode(code);
      loadConnections();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
    
    setIsGenerating(false);
  };

  const copyCode = () => {
    navigator.clipboard.writeText(`/start ${authCode}`);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  const revokeConnection = async (id: number) => {
    if (!confirm('–û—Ç–∫–ª—é—á–∏—Ç—å —ç—Ç–æ—Ç Telegram –∞–∫–∫–∞—É–Ω—Ç?')) return;

    const { error } = await supabase
      .from('telegram_connections')
      .delete()
      .eq('id', id);

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:', error);
      alert('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è');
      return;
    }

    loadConnections();
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  return (
    <div className="space-y-6">
      {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è */}
      <Card className="p-6 bg-gradient-to-br from-green-50 to-white border-green-200">
        <div className="flex items-start gap-4">
          <div className="p-3 rounded-xl bg-green-100">
            <Send className="h-6 w-6 text-green-600" />
          </div>
          <div className="flex-1">
            <h3 className="text-lg font-semibold text-gray-900 mb-2">–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Telegram –±–æ—Ç–∞</h3>
            <p className="text-sm text-gray-600 mb-4">
              –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —Å–≤–æ–π Telegram –∞–∫–∫–∞—É–Ω—Ç –∫ CRM —Å–∏—Å—Ç–µ–º–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —Ä–∞–±–æ—Ç—ã —Å AI –ø–æ–º–æ—â–Ω–∏–∫–æ–º.
            </p>
            <div className="bg-white rounded-lg p-4 border border-green-200">
              <p className="text-sm font-medium text-gray-900 mb-2">üì± –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</p>
              <ol className="text-sm text-gray-600 space-y-2 list-decimal list-inside">
                <li>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥"</li>
                <li>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</li>
                <li>–û—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ <span className="font-mono bg-gray-100 px-2 py-0.5 rounded">@TenderCRM_Bot</span> –≤ Telegram</li>
                <li>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –±–æ—Ç—É</li>
                <li>–ì–æ—Ç–æ–≤–æ! –í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã üéâ</li>
              </ol>
            </div>
          </div>
        </div>
      </Card>

      {/* –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ */}
      <Card className="p-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">–ö–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</h3>
        
        {!authCode ? (
          <Button
            onClick={generateCode}
            disabled={isGenerating}
            className="w-full bg-green-600 hover:bg-green-700"
          >
            {isGenerating ? (
              <>
                <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...
              </>
            ) : (
              <>
                <Send className="h-4 w-4 mr-2" />
                –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
              </>
            )}
          </Button>
        ) : (
          <div className="space-y-4">
            <div className="bg-gray-50 rounded-lg p-4 border-2 border-dashed border-gray-300">
              <p className="text-xs text-gray-600 mb-2">–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –±–æ—Ç—É:</p>
              <div className="flex items-center gap-2">
                <code className="flex-1 text-lg font-mono bg-white px-4 py-3 rounded border border-gray-200">
                  /start {authCode}
                </code>
                <Button
                  onClick={copyCode}
                  variant="outline"
                  size="sm"
                  className="flex-shrink-0"
                >
                  {copied ? (
                    <>
                      <CheckCircle className="h-4 w-4 mr-1 text-green-600" />
                      –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ
                    </>
                  ) : (
                    <>
                      <Copy className="h-4 w-4 mr-1" />
                      –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                    </>
                  )}
                </Button>
              </div>
            </div>
            <Button
              onClick={() => setAuthCode('')}
              variant="outline"
              size="sm"
              className="w-full"
            >
              –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥
            </Button>
          </div>
        )}
      </Card>

      {/* –°–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π */}
      <Card className="p-6">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-semibold text-gray-900">
            –ü–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã ({connections.filter(c => c.is_active).length})
          </h3>
          <Button
            onClick={loadConnections}
            variant="ghost"
            size="sm"
          >
            <RefreshCw className="h-4 w-4" />
          </Button>
        </div>

        {isLoading ? (
          <div className="text-center py-8 text-gray-500">
            <RefreshCw className="h-8 w-8 animate-spin mx-auto mb-2" />
            <p className="text-sm">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
          </div>
        ) : connections.filter(c => c.is_active).length === 0 ? (
          <div className="text-center py-8 text-gray-500">
            <Send className="h-12 w-12 mx-auto mb-3 text-gray-300" />
            <p className="text-sm">–ù–µ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤</p>
            <p className="text-xs text-gray-400 mt-1">–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ Telegram</p>
          </div>
        ) : (
          <div className="space-y-3">
            {connections.filter(c => c.is_active).map((connection) => (
              <div
                key={connection.id}
                className="flex items-center justify-between p-4 bg-gray-50 rounded-lg border border-gray-200 hover:border-green-300 transition-colors"
              >
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 rounded-full bg-green-100 flex items-center justify-center">
                    <Send className="h-5 w-5 text-green-600" />
                  </div>
                  <div>
                    <p className="font-medium text-gray-900">
                      {connection.telegram_first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
                      {connection.telegram_username && (
                        <span className="text-gray-500 ml-2">@{connection.telegram_username}</span>
                      )}
                    </p>
                    <p className="text-xs text-gray-500">
                      –ü–æ–¥–∫–ª—é—á–µ–Ω–æ: {formatDate(connection.connected_at)}
                    </p>
                  </div>
                </div>
                <Button
                  onClick={() => revokeConnection(connection.id)}
                  variant="ghost"
                  size="sm"
                  className="text-red-600 hover:text-red-700 hover:bg-red-50"
                >
                  <Trash2 className="h-4 w-4" />
                </Button>
              </div>
            ))}
          </div>
        )}
      </Card>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ */}
      <Card className="p-6 bg-gradient-to-br from-blue-50 to-white border-blue-200">
        <h3 className="text-lg font-semibold text-gray-900 mb-3">–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
          <div className="flex items-start gap-2">
            <CheckCircle className="h-5 w-5 text-green-600 flex-shrink-0 mt-0.5" />
            <div>
              <p className="font-medium text-gray-900">AI –ø–æ–º–æ—â–Ω–∏–∫</p>
              <p className="text-gray-600 text-xs">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–Ω–¥–µ—Ä–∞–º–∏ —á–µ—Ä–µ–∑ —á–∞—Ç</p>
            </div>
          </div>
          <div className="flex items-start gap-2">
            <CheckCircle className="h-5 w-5 text-green-600 flex-shrink-0 mt-0.5" />
            <div>
              <p className="font-medium text-gray-900">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</p>
              <p className="text-gray-600 text-xs">–û –¥–µ–¥–ª–∞–π–Ω–∞—Ö –∏ —Å–æ–±—ã—Ç–∏—è—Ö</p>
            </div>
          </div>
          <div className="flex items-start gap-2">
            <CheckCircle className="h-5 w-5 text-green-600 flex-shrink-0 mt-0.5" />
            <div>
              <p className="font-medium text-gray-900">–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã</p>
              <p className="text-gray-600 text-xs">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—Ç—á—ë—Ç—ã</p>
            </div>
          </div>
          <div className="flex items-start gap-2">
            <CheckCircle className="h-5 w-5 text-green-600 flex-shrink-0 mt-0.5" />
            <div>
              <p className="font-medium text-gray-900">–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞</p>
              <p className="text-gray-600 text-xs">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á—ë—Ç—ã</p>
            </div>
          </div>
        </div>
      </Card>
    </div>
  );
}
