'use client';

import { useEffect, useState } from 'react';
import { syncQueue, SyncStatus } from '@/lib/sync-queue';

interface OnlineStatusBorderProps {
  children: React.ReactNode;
  className?: string;
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç-–æ–±—ë—Ä—Ç–∫–∞ —Å —Ü–≤–µ—Ç–Ω–æ–π –æ–±–≤–æ–¥–∫–æ–π
 * üü¢ –ó–µ–ª—ë–Ω–∞—è - –æ–Ω–ª–∞–π–Ω
 * üî¥ –ö—Ä–∞—Å–Ω–∞—è - –æ—Ñ–ª–∞–π–Ω
 * üü° –ñ—ë–ª—Ç–∞—è - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
 */
export function OnlineStatusBorder({ children, className = '' }: OnlineStatusBorderProps) {
  const [isOnline, setIsOnline] = useState(true);
  const [syncStatus, setSyncStatus] = useState<SyncStatus>('idle');
  const [pendingCount, setPendingCount] = useState(0);

  useEffect(() => {
    // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setIsOnline(navigator.onLine);

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω
    const handleOnline = () => setIsOnline(true);
    const handleOffline = () => setIsOnline(false);

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    // –°–ª—É—à–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    const unsubscribe = syncQueue.onSyncStatusChange((status) => {
      setSyncStatus(status);
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const updatePendingCount = async () => {
      const count = await syncQueue.getPendingCount();
      setPendingCount(count);
    };

    updatePendingCount();
    const interval = setInterval(updatePendingCount, 5000); // –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
      unsubscribe();
      clearInterval(interval);
    };
  }, []);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –æ–±–≤–æ–¥–∫–∏
  const getBorderColor = () => {
    if (!isOnline) {
      return 'border-red-500'; // üî¥ –û—Ñ–ª–∞–π–Ω
    }
    if (syncStatus === 'syncing') {
      return 'border-yellow-500'; // üü° –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    }
    if (pendingCount > 0) {
      return 'border-orange-500'; // üü† –ï—Å—Ç—å –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    }
    return 'border-green-500'; // üü¢ –í—Å—ë —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–ª—â–∏–Ω—É –æ–±–≤–æ–¥–∫–∏ (–ø—É–ª—å—Å–∞—Ü–∏—è –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
  const getBorderWidth = () => {
    if (syncStatus === 'syncing') {
      return 'border-[5px] animate-pulse';
    }
    return 'border-[4px]';
  };

  // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –¥–ª—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
  const getGradientColor = () => {
    if (!isOnline) return '#ef4444'; // red-500
    if (syncStatus === 'syncing') return '#eab308'; // yellow-500
    if (pendingCount > 0) return '#f97316'; // orange-500
    return '#22c55e'; // green-500
  };

  return (
    <div className={`relative ${className}`}>
      {/* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±–≤–æ–¥–∫–∞ */}
      <div 
        className="relative rounded-b-3xl p-[4px]"
        style={{
          backgroundImage: `linear-gradient(90deg, transparent 0%, ${getGradientColor()} 50%, transparent 100%)`,
          backgroundSize: '200% 100%',
          animation: 'borderFlow 3s linear infinite',
        }}
      >
        {/* –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±–≤–æ–¥–∫–∞ */}
        <div 
          className="relative rounded-b-3xl overflow-hidden"
          style={{
            boxShadow: `inset 0 0 0 4px ${getGradientColor()}`,
            transition: 'box-shadow 0.5s ease-in-out',
          }}
        >
          {children}
        </div>
      </div>

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π */}
      {pendingCount > 0 && (
        <div className="absolute top-6 right-6 z-20">
          <div className="bg-orange-500 text-white text-xs font-bold px-2 py-1 rounded-full shadow-lg flex items-center gap-1">
            <svg
              className="w-3 h-3 animate-spin"
              fill="none"
              viewBox="0 0 24 24"
            >
              <circle
                className="opacity-25"
                cx="12"
                cy="12"
                r="10"
                stroke="currentColor"
                strokeWidth="4"
              />
              <path
                className="opacity-75"
                fill="currentColor"
                d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
              />
            </svg>
            {pendingCount}
          </div>
        </div>
      )}

      {/* –¢–µ–∫—Å—Ç–æ–≤—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä */}
      {!isOnline && (
        <div className="absolute bottom-6 left-1/2 transform -translate-x-1/2 z-20">
          <div className="bg-red-500 text-white text-xs font-medium px-3 py-1 rounded-full shadow-lg">
            üî¥ –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º
          </div>
        </div>
      )}
    </div>
  );
}
