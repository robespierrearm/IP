'use client';

import { useState } from 'react';
import { Tender, STATUS_TRANSITIONS, STATUS_LABELS } from '@/lib/supabase';
import { apiClient } from '@/lib/api-client';
import { ArrowRight, CheckCircle, XCircle, AlertCircle, X } from 'lucide-react';

interface MobileTenderStatusChangerProps {
  tender: Tender;
  onStatusChanged: () => void;
}

export function MobileTenderStatusChanger({ tender, onStatusChanged }: MobileTenderStatusChangerProps) {
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [selectedStatus, setSelectedStatus] = useState<Tender['status'] | null>(null);
  const [submittedPrice, setSubmittedPrice] = useState<string>('');
  const [winPrice, setWinPrice] = useState<string>('');
  const [isProcessing, setIsProcessing] = useState(false);
  const [validationError, setValidationError] = useState<string>('');

  const availableTransitions = STATUS_TRANSITIONS[tender.status];
  const isFinished = availableTransitions.length === 0;

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ —Å–º–µ–Ω–æ–π —Å—Ç–∞—Ç—É—Å–∞
  const validateTransition = (newStatus: Tender['status']): string | null => {
    if (tender.status === '–Ω–æ–≤—ã–π' && newStatus === '–ø–æ–¥–∞–Ω–æ') {
      if (!tender.name || !tender.start_price || !tender.submission_deadline) {
        return '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞, –¥–µ–¥–ª–∞–π–Ω';
      }
    }

    if (tender.status === '–ø–æ–±–µ–¥–∞' && newStatus === '–≤ —Ä–∞–±–æ—Ç–µ') {
      if (!tender.win_price) {
        return '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ "–¶–µ–Ω–∞ –ø–æ–±–µ–¥—ã" –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –≤ —Ä–∞–±–æ—Ç—É';
      }
    }

    return null;
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞
  const handleStatusClick = (newStatus: Tender['status']) => {
    const error = validateTransition(newStatus);
    if (error) {
      setValidationError(error);
      setIsDialogOpen(true);
      setSelectedStatus(null);
      return;
    }

    setSelectedStatus(newStatus);
    setValidationError('');
    setIsDialogOpen(true);
  };

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞
  const handleConfirm = async () => {
    if (!selectedStatus) return;

    setIsProcessing(true);

    try {
      const additionalData: Partial<Tender> = {};

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞
      switch (selectedStatus) {
        case '–ø–æ–¥–∞–Ω–æ':
          additionalData.submission_date = new Date().toISOString().split('T')[0];
          if (submittedPrice) {
            additionalData.submitted_price = parseFloat(submittedPrice);
          }
          // –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ "–ü–æ–¥–∞–Ω–æ"
          await apiClient.updateTender(tender.id, { status: selectedStatus, ...additionalData });
          
          // –ó–∞—Ç–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ "–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏"
          await apiClient.updateTender(tender.id, { status: '–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏' });
          
          setIsDialogOpen(false);
          setSelectedStatus(null);
          setSubmittedPrice('');
          alert('üëÄ –¢–µ–Ω–¥–µ—Ä –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏');
          onStatusChanged();
          setIsProcessing(false);
          return;

        case '–ø–æ–±–µ–¥–∞':
          if (winPrice) {
            additionalData.win_price = parseFloat(winPrice);
          }
          break;

        case '–≤ —Ä–∞–±–æ—Ç–µ':
          if (!tender.win_price) {
            setValidationError('–¶–µ–Ω–∞ –ø–æ–±–µ–¥—ã –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
            setIsProcessing(false);
            return;
          }
          break;
      }

      await apiClient.updateTender(tender.id, { status: selectedStatus, ...additionalData });
      
      setIsDialogOpen(false);
      setSelectedStatus(null);
      setWinPrice('');
      setSubmittedPrice('');
      
      // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      const messages: Record<Tender['status'], string> = {
        '–Ω–æ–≤—ã–π': '',
        '–ø–æ–¥–∞–Ω–æ': '‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞',
        '–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏': 'üëÄ –¢–µ–Ω–¥–µ—Ä –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏',
        '–ø–æ–±–µ–¥–∞': 'üéâ –¢–µ–Ω–¥–µ—Ä –≤—ã–∏–≥—Ä–∞–Ω!',
        '–≤ —Ä–∞–±–æ—Ç–µ': 'üîß –¢–µ–Ω–¥–µ—Ä –≤ —Ä–∞–±–æ—Ç–µ',
        '–∑–∞–≤–µ—Ä—à—ë–Ω': '‚úÖ –¢–µ–Ω–¥–µ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω',
        '–ø—Ä–æ–∏–≥—Ä—ã—à': '‚ùå –¢–µ–Ω–¥–µ—Ä –ø—Ä–æ–∏–≥—Ä–∞–Ω',
      };
      if (messages[selectedStatus]) {
        alert(messages[selectedStatus]);
      }
      
      onStatusChanged();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞:', error);
      setValidationError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞');
    } finally {
      setIsProcessing(false);
    }
  };

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–ª—å –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
  const getStatusStyle = (status: Tender['status']) => {
    switch (status) {
      case '–ø–æ–¥–∞–Ω–æ':
        return 'bg-gradient-to-r from-indigo-500 to-purple-500 text-white shadow-md shadow-indigo-200';
      case '–ø–æ–±–µ–¥–∞':
        return 'bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-md shadow-green-200';
      case '–≤ —Ä–∞–±–æ—Ç–µ':
        return 'bg-gradient-to-r from-orange-500 to-amber-500 text-white shadow-md shadow-orange-200';
      case '–∑–∞–≤–µ—Ä—à—ë–Ω':
        return 'bg-gradient-to-r from-gray-500 to-slate-500 text-white shadow-md shadow-gray-200';
      case '–ø—Ä–æ–∏–≥—Ä—ã—à':
        return 'bg-gradient-to-r from-red-500 to-rose-500 text-white shadow-md shadow-red-200';
      default:
        return 'bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-md shadow-blue-200';
    }
  };

  if (isFinished) {
    return (
      <div className="flex items-center gap-2 text-sm text-gray-500 px-3 py-2">
        <CheckCircle className="w-4 h-4" />
        <span>–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å</span>
      </div>
    );
  }

  return (
    <>
      <div className="flex flex-wrap gap-3">
        {availableTransitions.map((nextStatus) => (
          <button
            key={nextStatus}
            onClick={() => handleStatusClick(nextStatus)}
            className={`inline-flex items-center gap-2 px-4 py-2.5 text-sm font-semibold rounded-xl transition-all active:scale-95 ${getStatusStyle(nextStatus)}`}
          >
            {nextStatus === '–ø–æ–±–µ–¥–∞' && <CheckCircle className="w-4 h-4" />}
            {nextStatus === '–ø—Ä–æ–∏–≥—Ä—ã—à' && <XCircle className="w-4 h-4" />}
            {nextStatus !== '–ø–æ–±–µ–¥–∞' && nextStatus !== '–ø—Ä–æ–∏–≥—Ä—ã—à' && <ArrowRight className="w-4 h-4" />}
            {STATUS_LABELS[nextStatus]}
          </button>
        ))}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ */}
      {isDialogOpen && (
        <div
          className="fixed inset-0 bg-black/50 z-50 flex items-end"
          onClick={() => {
            setIsDialogOpen(false);
            setSelectedStatus(null);
            setWinPrice('');
            setSubmittedPrice('');
            setValidationError('');
          }}
        >
          <div
            className="bg-white rounded-t-3xl w-full max-h-[80vh] overflow-y-auto animate-slide-up"
            onClick={(e) => e.stopPropagation()}
          >
            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–≤–∞–π–ø–∞ */}
            <div className="flex justify-center py-3">
              <div className="w-12 h-1 bg-gray-300 rounded-full"></div>
            </div>

            <div className="px-6 pb-6">
              {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-xl font-bold text-gray-900">
                  {validationError ? (
                    <div className="flex items-center gap-2 text-red-600">
                      <AlertCircle className="w-5 h-5" />
                      –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                    </div>
                  ) : (
                    `–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ "${selectedStatus ? STATUS_LABELS[selectedStatus] : ''}"`
                  )}
                </h2>
                <button
                  onClick={() => {
                    setIsDialogOpen(false);
                    setSelectedStatus(null);
                    setWinPrice('');
                    setSubmittedPrice('');
                    setValidationError('');
                  }}
                  className="p-2 hover:bg-gray-100 rounded-lg"
                >
                  <X className="w-5 h-5" />
                </button>
              </div>

              <p className="text-gray-600 mb-4">
                {validationError || '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–Ω–¥–µ—Ä–∞'}
              </p>

              {/* –ü–æ–ª–µ —Ü–µ–Ω—ã –ø–æ–¥–∞—á–∏ */}
              {!validationError && selectedStatus === '–ø–æ–¥–∞–Ω–æ' && (
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –¶–µ–Ω–∞ –ø–æ–¥–∞—á–∏ (‚ÇΩ) *
                  </label>
                  <input
                    type="number"
                    value={submittedPrice}
                    onChange={(e) => setSubmittedPrice(e.target.value)}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ –∫–æ—Ç–æ—Ä–æ–π –ø–æ–¥–∞–ª–∏"
                    className="w-full px-4 py-3 bg-white border border-gray-200 rounded-xl focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                  />
                  <p className="text-sm text-gray-500 mt-2">
                    –£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ —Ç–µ–Ω–¥–µ—Ä
                  </p>
                  <p className="text-sm text-blue-600 font-medium mt-2">
                    ‚ÑπÔ∏è –ü–æ—Å–ª–µ –ø–æ–¥–∞—á–∏ —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞ "–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏"
                  </p>
                </div>
              )}

              {/* –ü–æ–ª–µ —Ü–µ–Ω—ã –ø–æ–±–µ–¥—ã */}
              {!validationError && selectedStatus === '–ø–æ–±–µ–¥–∞' && (
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –¶–µ–Ω–∞ –ø–æ–±–µ–¥—ã (‚ÇΩ) *
                  </label>
                  <input
                    type="number"
                    value={winPrice}
                    onChange={(e) => setWinPrice(e.target.value)}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–±–µ–¥—ã"
                    className="w-full px-4 py-3 bg-white border border-gray-200 rounded-xl focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                  />
                  <p className="text-sm text-gray-500 mt-2">
                    –≠—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Å—Ç–∞—Ç—É—Å "–ü–æ–±–µ–¥–∞"
                  </p>
                </div>
              )}

              {/* –ö–Ω–æ–ø–∫–∏ */}
              <div className="flex gap-3 mt-6">
                {!validationError && (
                  <button
                    onClick={handleConfirm}
                    disabled={
                      isProcessing || 
                      (selectedStatus === '–ø–æ–¥–∞–Ω–æ' && !submittedPrice) ||
                      (selectedStatus === '–ø–æ–±–µ–¥–∞' && !winPrice)
                    }
                    className="flex-1 bg-gradient-to-br from-primary-500 to-secondary-600 text-white py-4 rounded-xl font-medium active:scale-95 transition-transform disabled:opacity-50"
                  >
                    {isProcessing ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'}
                  </button>
                )}
                <button
                  onClick={() => {
                    setIsDialogOpen(false);
                    setSelectedStatus(null);
                    setWinPrice('');
                    setSubmittedPrice('');
                    setValidationError('');
                  }}
                  className="px-6 bg-gray-100 text-gray-700 py-4 rounded-xl font-medium active:bg-gray-200 transition-colors"
                >
                  {validationError ? '–ó–∞–∫—Ä—ã—Ç—å' : '–û—Ç–º–µ–Ω–∞'}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </>
  );
}
