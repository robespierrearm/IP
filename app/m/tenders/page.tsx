'use client';

import { useEffect, useState, useCallback, useMemo } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { Tender, STATUS_LABELS } from '@/lib/supabase';
import { apiClient } from '@/lib/api-client';
import { Plus, Search, Filter, Calendar, DollarSign, MapPin, ExternalLink, ArrowRight, AlertTriangle, FileText } from 'lucide-react';
import { formatPrice, formatDate } from '@/lib/utils';
import { getStatusEmoji } from '@/lib/tender-utils';
import { getSmartNotification } from '@/lib/tender-notifications';
import { useAutoClose } from '@/hooks/useAutoClose';
import { MobileTenderStatusChanger } from '@/components/mobile/TenderStatusChanger';
import { SwipeableTenderCard } from '@/components/mobile/SwipeableTenderCard';
import { TenderCardModern } from '@/components/mobile/TenderCardModern';
import { TenderCardApple } from '@/components/mobile/TenderCardApple';
import { AnimatedTenderCard } from '@/components/mobile/AnimatedTenderCard';
import { TenderCardSkeletonGroup } from '@/components/mobile/TenderCardSkeleton';
import { TenderDetailsModal } from '@/components/mobile/TenderDetailsModal';
import { toast } from 'sonner';
import { haptics } from '@/lib/haptics';
import { AnimatePresence, motion } from 'framer-motion';
import { useDebounce } from '@/hooks/useDebounce';

type CardStyle = 'original' | 'modern' | 'apple';

export default function TendersPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [tenders, setTenders] = useState<Tender[]>([]);
  const [searchQuery, setSearchQuery] = useState('');
  const debouncedSearchQuery = useDebounce(searchQuery, 300); // Debounce 300ms
  const [selectedStatus, setSelectedStatus] = useState<string>('all');
  const [isLoading, setIsLoading] = useState(true);
  const [selectedTender, setSelectedTender] = useState<Tender | null>(null);
  const [tenderToDelete, setTenderToDelete] = useState<Tender | null>(null);
  const [isDeleting, setIsDeleting] = useState(false);
  const [deletingId, setDeletingId] = useState<number | null>(null);
  const [openCardId, setOpenCardId] = useState<number>(-1);
  const [cardStyle, setCardStyle] = useState<CardStyle>('modern'); // –°—Ç–∏–ª—å –∫–∞—Ä—Ç–æ—á–µ–∫

  useEffect(() => {
    // –ß–∏—Ç–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä status –∏–∑ URL
    const statusFromUrl = searchParams.get('status');
    if (statusFromUrl) {
      setSelectedStatus(statusFromUrl);
    }
    loadTenders();
  }, []);

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–µ–Ω–¥–µ—Ä–æ–≤
  const filteredTenders = useMemo(() => {
    let filtered = [...tenders];

    // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∏—Å–∫—É
    if (debouncedSearchQuery) {
      filtered = filtered.filter((t) =>
        t.name.toLowerCase().includes(debouncedSearchQuery.toLowerCase())
      );
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if (selectedStatus !== 'all') {
      if (selectedStatus === 'urgent') {
        // –°—Ä–æ—á–Ω—ã–µ: —É–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å priority urgent –∏–ª–∏ high
        filtered = filtered.filter((t) => {
          const notification = getSmartNotification(t);
          return notification && (notification.priority === 'urgent' || notification.priority === 'high');
        });
      } else if (selectedStatus === '–Ω–æ–≤—ã–π') {
        filtered = filtered.filter((t) => t.status === '–Ω–æ–≤—ã–π' || t.status === '–ø–æ–¥–∞–Ω–æ');
      } else {
        filtered = filtered.filter((t) => t.status === selectedStatus);
      }
    }

    return filtered;
  }, [tenders, debouncedSearchQuery, selectedStatus]);

  // –ê–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)
  useAutoClose(openCardId !== -1, () => setOpenCardId(-1), 3000, '[data-card-id]');

  const loadTenders = useCallback(async () => {
    setIsLoading(true);
    try {
      const response = await apiClient.getTenders();
      if (response.success && response.data) {
        setTenders(response.data as Tender[]);
      } else {
        throw new Error(response.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–Ω–¥–µ—Ä—ã');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–Ω–¥–µ—Ä–æ–≤:', error);
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏', {
        description: error instanceof Error ? error.message : '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–Ω–¥–µ—Ä—ã'
      });
    }
    setIsLoading(false);
  }, []);

  const getStatusColorMobile = useCallback((status: Tender['status']) => {
    switch (status) {
      case '–Ω–æ–≤—ã–π':
        return 'bg-gray-100 text-gray-700 border-gray-200';
      case '–ø–æ–¥–∞–Ω–æ':
        return 'bg-blue-100 text-blue-700 border-blue-200';
      case '–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏':
        return 'bg-yellow-100 text-yellow-700 border-yellow-200';
      case '–ø–æ–±–µ–¥–∞':
        return 'bg-purple-100 text-purple-700 border-purple-200';
      case '–≤ —Ä–∞–±–æ—Ç–µ':
        return 'bg-green-100 text-green-700 border-green-200';
      case '–∑–∞–≤–µ—Ä—à—ë–Ω':
        return 'bg-gray-100 text-gray-700 border-gray-200';
      case '–ø—Ä–æ–∏–≥—Ä—ã—à':
        return 'bg-red-100 text-red-700 border-red-200';
      default:
        return 'bg-gray-100 text-gray-700 border-gray-200';
    }
  }, []);

  const statusFilters = [
    { value: 'all', label: '–í—Å–µ' },
    { value: 'urgent', label: 'üî• –°—Ä–æ—á–Ω—ã–µ' },
    { value: '–Ω–æ–≤—ã–π', label: '–ù–æ–≤—ã–µ' },
    { value: '–≤ —Ä–∞–±–æ—Ç–µ', label: '–í —Ä–∞–±–æ—Ç–µ' },
    { value: '–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏', label: '–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ' },
    { value: '–ø–æ–¥–∞–Ω–æ', label: '–ü–æ–¥–∞–Ω–æ' },
    { value: '–ø–æ–±–µ–¥–∞', label: '–ü–æ–±–µ–¥–∞' },
    { value: '–ø—Ä–æ–∏–≥—Ä—ã—à', label: '–ü—Ä–æ–∏–≥—Ä—ã—à' },
    { value: '–∑–∞–≤–µ—Ä—à—ë–Ω', label: '–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ' },
  ];

  const handleDeleteRequest = (tender: Tender) => {
    haptics.warning(); // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–∏–∞–ª–æ–≥–∞ —É–¥–∞–ª–µ–Ω–∏—è
    setTenderToDelete(tender);
  };

  const handleDeleteConfirm = async () => {
    if (!tenderToDelete) return;

    const deletedTender = tenderToDelete;
    
    // –û–ü–¢–ò–ú–ò–°–¢–ò–ß–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï: —Å—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º –∏–∑ UI
    setDeletingId(deletedTender.id);
    haptics.medium();
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
    setTimeout(() => {
      setTenders(prev => prev.filter(t => t.id !== deletedTender.id));
      setTenderToDelete(null);
      setDeletingId(null);
    }, 300);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º toast —Å—Ä–∞–∑—É
    haptics.success();
    toast.success('–¢–µ–Ω–¥–µ—Ä —É–¥–∞–ª—ë–Ω', {
      description: '–¢–µ–Ω–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞'
    });

    // –í —Ñ–æ–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    try {
      await apiClient.deleteTender(deletedTender.id);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–Ω–¥–µ—Ä–∞:', error);
      
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–Ω–¥–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ
      setTenders(prev => [...prev, deletedTender].sort((a, b) => {
        const dateA = a.created_at ? new Date(a.created_at).getTime() : 0;
        const dateB = b.created_at ? new Date(b.created_at).getTime() : 0;
        return dateB - dateA;
      }));
      
      haptics.error();
      toast.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è', {
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–Ω–¥–µ—Ä. –û–Ω –±—ã–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.'
      });
    }
  };

  const handleDeleteCancel = () => {
    setTenderToDelete(null);
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* –®–∞–ø–∫–∞ */}
      <div className="bg-white border-b border-gray-200 px-6 py-4 sticky top-0 z-30">
        <div className="flex items-center justify-between mb-4">
          <h1 className="text-2xl font-bold text-gray-900">–¢–µ–Ω–¥–µ—Ä—ã</h1>
          
          {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Å—Ç–∏–ª–µ–π */}
          <div className="flex gap-1 bg-gray-100 p-1 rounded-lg">
            <button
              onClick={() => setCardStyle('modern')}
              className={`px-3 py-1 text-xs font-medium rounded transition-colors ${
                cardStyle === 'modern' ? 'bg-white text-gray-900 shadow-sm' : 'text-gray-600'
              }`}
            >
              Modern
            </button>
            <button
              onClick={() => setCardStyle('apple')}
              className={`px-3 py-1 text-xs font-medium rounded transition-colors ${
                cardStyle === 'apple' ? 'bg-white text-gray-900 shadow-sm' : 'text-gray-600'
              }`}
            >
              Apple
            </button>
            <button
              onClick={() => setCardStyle('original')}
              className={`px-3 py-1 text-xs font-medium rounded transition-colors ${
                cardStyle === 'original' ? 'bg-white text-gray-900 shadow-sm' : 'text-gray-600'
              }`}
            >
              Old
            </button>
          </div>
        </div>

        {/* –ü–æ–∏—Å–∫ */}
        <div className="relative mb-3">
          <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400" />
          <input
            type="text"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            placeholder="–ü–æ–∏—Å–∫ —Ç–µ–Ω–¥–µ—Ä–æ–≤..."
            className="w-full pl-10 pr-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-primary-500 focus:border-transparent"
          />
        </div>

        {/* –§–∏–ª—å—Ç—Ä—ã —Å—Ç–∞—Ç—É—Å–æ–≤ */}
        <div className="flex gap-2 overflow-x-auto no-scrollbar pb-1">
          {statusFilters.map((filter) => (
            <button
              key={filter.value}
              onClick={() => setSelectedStatus(filter.value)}
              className={`px-4 py-2 rounded-xl text-sm font-medium whitespace-nowrap transition-colors ${
                selectedStatus === filter.value
                  ? 'bg-primary-500 text-white'
                  : 'bg-gray-100 text-gray-700 active:bg-gray-200'
              }`}
            >
              {filter.label}
            </button>
          ))}
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ —Ç–µ–Ω–¥–µ—Ä–æ–≤ */}
      <div className="px-6 py-4 space-y-3">
        {isLoading ? (
          <TenderCardSkeletonGroup count={5} />
        ) : filteredTenders.length === 0 ? (
          <div className="text-center py-12">
            <Filter className="w-12 h-12 text-gray-300 mx-auto mb-3" />
            <p className="text-gray-500 text-sm">–¢–µ–Ω–¥–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>
          </div>
        ) : (
          <AnimatePresence mode="popLayout">
            {filteredTenders.map((tender, index) => (
              <AnimatedTenderCard
                key={tender.id}
                tender={tender}
                index={index}
                onDelete={handleDeleteRequest}
                onClick={setSelectedTender}
                isOpen={openCardId === tender.id}
                onOpen={setOpenCardId}
                getStatusColor={getStatusColorMobile}
                isDeleting={deletingId === tender.id}
                cardStyle={cardStyle}
              />
            ))}
          </AnimatePresence>
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ - –≤—ã–Ω–µ—Å–µ–Ω–æ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç) */}
      <TenderDetailsModal
        tender={selectedTender}
        onClose={() => setSelectedTender(null)}
        onUpdate={loadTenders}
      />

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è */}
      <AnimatePresence>
        {tenderToDelete && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.2 }}
            className="fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-6"
            onClick={handleDeleteCancel}
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              transition={{ type: 'spring', damping: 25, stiffness: 300 }}
              className="bg-white rounded-3xl w-full max-w-sm p-6"
              onClick={(e: React.MouseEvent) => e.stopPropagation()}
            >
            {/* –ò–∫–æ–Ω–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è */}
            <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <AlertTriangle className="w-8 h-8 text-red-600" />
            </div>

            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
            <h3 className="text-xl font-bold text-gray-900 text-center mb-2">
              –£–¥–∞–ª–∏—Ç—å —Ç–µ–Ω–¥–µ—Ä?
            </h3>

            {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
            <p className="text-gray-600 text-center mb-6">
              –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å <span className="font-semibold">{tenderToDelete.name}</span>?
              <br />
              <span className="text-sm text-red-600">–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.</span>
            </p>

            {/* –ö–Ω–æ–ø–∫–∏ */}
            <div className="flex gap-3">
              <button
                onClick={handleDeleteCancel}
                disabled={isDeleting}
                className="flex-1 bg-gray-100 text-gray-700 py-3 rounded-xl font-medium active:bg-gray-200 transition-colors disabled:opacity-50"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                onClick={handleDeleteConfirm}
                disabled={isDeleting}
                className="flex-1 bg-red-500 text-white py-3 rounded-xl font-medium active:bg-red-600 transition-colors disabled:opacity-50 flex items-center justify-center gap-2"
              >
                {isDeleting ? (
                  <>
                    <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                    –£–¥–∞–ª–µ–Ω–∏–µ...
                  </>
                ) : (
                  '–£–¥–∞–ª–∏—Ç—å'
                )}
              </button>
            </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Floating Action Button */}
      <motion.button
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
        onClick={() => {
          haptics.light();
          router.push('/m/tenders/add');
        }}
        className="fixed bottom-24 right-6 w-14 h-14 bg-gradient-to-br from-primary-500 to-secondary-600 text-white rounded-full shadow-lg flex items-center justify-center z-30"
      >
        <Plus className="w-6 h-6" />
      </motion.button>
    </div>
  );
}
