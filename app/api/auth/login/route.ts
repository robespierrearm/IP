import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';
import jwt from 'jsonwebtoken';
import bcrypt from 'bcryptjs';

const JWT_SECRET = process.env.JWT_SECRET || 'fallback-secret-key-change-in-production';
const JWT_EXPIRES_IN = '7d'; // –¢–æ–∫–µ–Ω –∂–∏–≤—ë—Ç 7 –¥–Ω–µ–π

export async function POST(request: NextRequest) {
  try {
    const { email, password } = await request.json();

    if (!email || !password) {
      return NextResponse.json(
        { error: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
        { status: 400 }
      );
    }

    // –ü—Ä–∏–≤–æ–¥–∏–º email –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞
    const normalizedEmail = email.toLowerCase().trim();

    console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:', normalizedEmail);

    // 1. –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –ø–æ–∏—Å–∫)
    const { data: user, error } = await supabase
      .from('users')
      .select('*')
      .ilike('email', normalizedEmail)
      .eq('is_active', true)
      .single();

    if (error || !user) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', error);
      return NextResponse.json(
        { error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' },
        { status: 401 }
      );
    }

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user.email);

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–∞—Ä–æ–ª—å –≤ –±–∞–∑–µ
    const isBcryptHash = user.password.startsWith('$2a$') || user.password.startsWith('$2b$');
    
    console.log('üîë –ü–∞—Ä–æ–ª—å –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω:', isBcryptHash);
    
    let isValidPassword = false;
    if (isBcryptHash) {
      // –ü–∞—Ä–æ–ª—å –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º bcrypt
      isValidPassword = await bcrypt.compare(password, user.password);
      console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ bcrypt:', isValidPassword);
    } else {
      // –ü–∞—Ä–æ–ª—å –Ω–µ –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω - –ø—Ä—è–º–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
      isValidPassword = password === user.password;
      console.log('üîì –ü—Ä—è–º–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ:', isValidPassword);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ö–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—Ö–æ–¥–µ
      if (isValidPassword) {
        console.log('üíæ –•–µ—à–∏—Ä—É—é –ø–∞—Ä–æ–ª—å...');
        const hashedPassword = await bcrypt.hash(password, 10);
        await supabase
          .from('users')
          .update({ password: hashedPassword })
          .eq('id', user.id);
        console.log('‚úÖ –ü–∞—Ä–æ–ª—å –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω');
      }
    }
    
    if (!isValidPassword) {
      console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
      return NextResponse.json(
        { error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' },
        { status: 401 }
      );
    }

    console.log('üéâ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω!');

    // 3. –°–æ–∑–¥–∞—ë–º JWT —Ç–æ–∫–µ–Ω
    const token = jwt.sign(
      {
        userId: user.id,
        email: user.email,
        username: user.username,
      },
      JWT_SECRET,
      { expiresIn: JWT_EXPIRES_IN }
    );

    // 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await supabase
      .from('users')
      .update({
        is_online: true,
        last_activity: new Date().toISOString(),
      })
      .eq('id', user.id);

    // 5. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º httpOnly cookie
    const response = NextResponse.json({
      success: true,
      user: {
        id: user.id,
        username: user.username,
        email: user.email,
      },
    });

    response.cookies.set('auth-token', token, {
      httpOnly: true,      // –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑ JavaScript (–∑–∞—â–∏—Ç–∞ –æ—Ç XSS)
      secure: process.env.NODE_ENV === 'production', // HTTPS only –≤ production
      sameSite: 'lax',     // –ó–∞—â–∏—Ç–∞ –æ—Ç CSRF
      maxAge: 60 * 60 * 24 * 7, // 7 –¥–Ω–µ–π
      path: '/',
    });

    return response;
  } catch (error) {
    console.error('Login error:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ' },
      { status: 500 }
    );
  }
}
