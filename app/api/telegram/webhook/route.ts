import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '8461717103:AAEZl4hs5oXaOtnCsKNexcVGCPdjeG4RvkA';
const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const SUPABASE_ANON_KEY = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendMessage(chatId: number, text: string, options: any = {}) {
  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
  
  const response = await fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      chat_id: chatId,
      text,
      parse_mode: 'HTML',
      ...options,
    }),
  });

  return response.json();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function checkAuth(telegramId: string) {
  const { data } = await supabase
    .from('telegram_connections')
    .select('*, users(*)')
    .eq('telegram_id', telegramId)
    .eq('is_active', true)
    .single();

  return data;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
async function handleStart(message: any) {
  const chatId = message.chat.id;
  const telegramId = message.from.id.toString();
  const text = message.text;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const parts = text.split(' ');
  
  if (parts.length < 2) {
    await sendMessage(chatId, 
      'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç TenderCRM.\n\n' +
      '–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n' +
      '1. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–≤–µ—Ä—Å–∏—é CRM\n' +
      '2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ê–¥–º–∏–Ω–∫–∞ ‚Üí Telegram\n' +
      '3. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∫–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n' +
      '4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–æ–º–∞–Ω–¥—É: /start –í–ê–®_–ö–û–î'
    );
    return;
  }

  const authCode = parts[1];

  // –ò—â–µ–º –∫–æ–¥ –≤ –±–∞–∑–µ
  const { data: connection, error } = await supabase
    .from('telegram_connections')
    .select('*, users(*)')
    .eq('auth_code', authCode)
    .eq('is_active', false)
    .single();

  if (error || !connection) {
    await sendMessage(chatId, 
      '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.\n\n' +
      '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –≤ –≤–µ–±-–≤–µ—Ä—Å–∏–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
    );
    return;
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  const { error: updateError } = await supabase
    .from('telegram_connections')
    .update({
      telegram_id: telegramId,
      telegram_username: message.from.username || null,
      telegram_first_name: message.from.first_name || null,
      telegram_last_name: message.from.last_name || null,
      is_active: true,
      connected_at: new Date().toISOString(),
      last_activity: new Date().toISOString(),
    })
    .eq('id', connection.id);

  if (updateError) {
    await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    return;
  }

  // –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  await sendMessage(chatId, 
    `‚úÖ <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!</b>\n\n` +
    `–ü—Ä–∏–≤–µ—Ç, ${message.from.first_name}! üëã\n\n` +
    `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n` +
    `‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö\n` +
    `‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–Ω–¥–µ—Ä–∞–º–∏ —á–µ—Ä–µ–∑ AI\n` +
    `‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n` +
    `<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n` +
    `/dashboard - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n` +
    `/tenders - –°–ø–∏—Å–æ–∫ —Ç–µ–Ω–¥–µ—Ä–æ–≤\n` +
    `/reminders - –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n` +
    `/help - –°–ø—Ä–∞–≤–∫–∞\n\n` +
    `–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ AI –ø–æ–º–æ—â–Ω–∏–∫ –≤–∞–º –ø–æ–º–æ–∂–µ—Ç! ü§ñ`
  );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /dashboard
async function handleDashboard(message: any) {
  const chatId = message.chat.id;
  const telegramId = message.from.id.toString();

  const auth = await checkAuth(telegramId);
  if (!auth) {
    await sendMessage(chatId, '‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –ö–û–î');
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const { data: tenders } = await supabase
    .from('tenders')
    .select('*');

  const inWork = tenders?.filter(t => t.status === '–≤ —Ä–∞–±–æ—Ç–µ').length || 0;
  const underReview = tenders?.filter(t => t.status === '–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏').length || 0;
  const total = tenders?.length || 0;

  // –§–∏–Ω–∞–Ω—Å—ã
  const totalIncome = tenders?.reduce((sum, t) => {
    if (t.status === '–∑–∞–≤–µ—Ä—à—ë–Ω') return sum + (t.win_price || 0);
    return sum;
  }, 0) || 0;

  const { data: expenses } = await supabase
    .from('expenses')
    .select('amount');

  const totalExpenses = expenses?.reduce((sum, e) => sum + e.amount, 0) || 0;
  const profit = totalIncome - totalExpenses;

  await sendMessage(chatId,
    `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ TenderCRM</b>\n\n` +
    `<b>–¢–µ–Ω–¥–µ—Ä—ã:</b>\n` +
    `‚Ä¢ –í—Å–µ–≥–æ: ${total}\n` +
    `‚Ä¢ –í —Ä–∞–±–æ—Ç–µ: ${inWork}\n` +
    `‚Ä¢ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏: ${underReview}\n\n` +
    `<b>–§–∏–Ω–∞–Ω—Å—ã:</b>\n` +
    `‚Ä¢ –î–æ—Ö–æ–¥: ${formatPrice(totalIncome)}\n` +
    `‚Ä¢ –†–∞—Å—Ö–æ–¥—ã: ${formatPrice(totalExpenses)}\n` +
    `‚Ä¢ –ü—Ä–∏–±—ã–ª—å: ${formatPrice(profit)}`
  );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /tenders
async function handleTenders(message: any) {
  const chatId = message.chat.id;
  const telegramId = message.from.id.toString();

  const auth = await checkAuth(telegramId);
  if (!auth) {
    await sendMessage(chatId, '‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –ö–û–î');
    return;
  }

  const { data: tenders } = await supabase
    .from('tenders')
    .select('*')
    .in('status', ['–Ω–æ–≤—ã–π', '–ø–æ–¥–∞–Ω–æ', '–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏', '–≤ —Ä–∞–±–æ—Ç–µ'])
    .order('created_at', { ascending: false })
    .limit(10);

  if (!tenders || tenders.length === 0) {
    await sendMessage(chatId, 'üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ–Ω–¥–µ—Ä–æ–≤');
    return;
  }

  let text = 'üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä—ã:</b>\n\n';
  
  tenders.forEach((tender, index) => {
    const statusEmoji = getStatusEmoji(tender.status);
    text += `${index + 1}. ${statusEmoji} <b>${tender.name}</b>\n`;
    text += `   –°—Ç–∞—Ç—É—Å: ${tender.status}\n`;
    if (tender.start_price) {
      text += `   –¶–µ–Ω–∞: ${formatPrice(tender.start_price)}\n`;
    }
    text += '\n';
  });

  await sendMessage(chatId, text);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reminders
async function handleReminders(message: any) {
  const chatId = message.chat.id;
  const telegramId = message.from.id.toString();

  const auth = await checkAuth(telegramId);
  if (!auth) {
    await sendMessage(chatId, '‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –ö–û–î');
    return;
  }

  const { data: tenders } = await supabase
    .from('tenders')
    .select('*')
    .not('submission_deadline', 'is', null);

  const threeDaysFromNow = new Date();
  threeDaysFromNow.setDate(threeDaysFromNow.getDate() + 3);

  const reminders = tenders?.filter(t => {
    if (!t.submission_deadline) return false;
    const deadline = new Date(t.submission_deadline);
    const now = new Date();
    return deadline >= now && deadline <= threeDaysFromNow;
  }) || [];

  if (reminders.length === 0) {
    await sendMessage(chatId, '‚úÖ –ù–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –í—Å–µ –¥–µ–¥–ª–∞–π–Ω—ã –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º!');
    return;
  }

  let text = '‚ö†Ô∏è <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö:</b>\n\n';
  
  reminders.forEach((tender, index) => {
    const deadline = new Date(tender.submission_deadline!);
    const now = new Date();
    const daysLeft = Math.ceil((deadline.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));
    
    const urgentEmoji = daysLeft <= 1 ? 'üî•' : '‚è∞';
    text += `${index + 1}. ${urgentEmoji} <b>${tender.name}</b>\n`;
    text += `   –î–µ–¥–ª–∞–π–Ω: ${formatDate(tender.submission_deadline!)}\n`;
    text += `   –û—Å—Ç–∞–ª–æ—Å—å: ${daysLeft === 0 ? '–°–ï–ì–û–î–ù–Ø!' : daysLeft === 1 ? '–ó–∞–≤—Ç—Ä–∞' : `${daysLeft} –¥–Ω.`}\n\n`;
  });

  await sendMessage(chatId, text);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
async function handleHelp(message: any) {
  const chatId = message.chat.id;

  await sendMessage(chatId,
    `ü§ñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É TenderCRM</b>\n\n` +
    `<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n` +
    `/start - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–∏—Å—Ç–µ–º–µ\n` +
    `/dashboard - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n` +
    `/tenders - –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ–Ω–¥–µ—Ä–æ–≤\n` +
    `/reminders - –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö\n` +
    `/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n` +
    `<b>AI –ü–æ–º–æ—â–Ω–∏–∫:</b>\n` +
    `–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ:\n` +
    `‚Ä¢ "–î–æ–±–∞–≤—å —Ä–∞—Å—Ö–æ–¥ 5000—Ä –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"\n` +
    `‚Ä¢ "–ü–æ–∫–∞–∂–∏ —Ñ–∏–Ω–∞–Ω—Å—ã –∑–∞ –º–µ—Å—è—Ü"\n` +
    `‚Ä¢ "–°–∫–æ–ª—å–∫–æ —Ç–µ–Ω–¥–µ—Ä–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ?"\n\n` +
    `–Ø –ø–æ–Ω–∏–º–∞—é –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫! üß†`
  );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (AI)
async function handleTextMessage(message: any) {
  const chatId = message.chat.id;
  const telegramId = message.from.id.toString();
  const text = message.text;

  const auth = await checkAuth(telegramId);
  if (!auth) {
    await sendMessage(chatId, '‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –ö–û–î');
    return;
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..."
  await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendChatAction`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ chat_id: chatId, action: 'typing' }),
  });

  // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AI (—Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥)
  await sendMessage(chatId, 
    'ü§ñ AI –ø–æ–º–æ—â–Ω–∏–∫ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω!\n\n' +
    '–ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
    '/dashboard - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n' +
    '/tenders - –¢–µ–Ω–¥–µ—Ä—ã\n' +
    '/reminders - –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'
  );
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function formatPrice(price: number): string {
  return new Intl.NumberFormat('ru-RU', {
    style: 'currency',
    currency: 'RUB',
    maximumFractionDigits: 0,
  }).format(price);
}

function formatDate(dateString: string): string {
  const date = new Date(dateString);
  return date.toLocaleDateString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
  });
}

function getStatusEmoji(status: string): string {
  const emojis: Record<string, string> = {
    '–Ω–æ–≤—ã–π': 'üÜï',
    '–ø–æ–¥–∞–Ω–æ': 'üì§',
    '–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏': 'üëÄ',
    '–ø–æ–±–µ–¥–∞': 'üéâ',
    '–≤ —Ä–∞–±–æ—Ç–µ': 'üîß',
    '–∑–∞–≤–µ—Ä—à—ë–Ω': '‚úÖ',
    '–ø—Ä–æ–∏–≥—Ä—ã—à': '‚ùå',
  };
  return emojis[status] || 'üìã';
}

// –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    
    // Telegram –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ø–æ–ª–µ "message"
    const message = body.message;
    
    if (!message) {
      return NextResponse.json({ ok: true });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º last_activity
    if (message.from) {
      await supabase
        .from('telegram_connections')
        .update({ last_activity: new Date().toISOString() })
        .eq('telegram_id', message.from.id.toString());
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if (message.text) {
      const text = message.text.trim();
      
      if (text.startsWith('/start')) {
        await handleStart(message);
      } else if (text === '/dashboard') {
        await handleDashboard(message);
      } else if (text === '/tenders') {
        await handleTenders(message);
      } else if (text === '/reminders') {
        await handleReminders(message);
      } else if (text === '/help') {
        await handleHelp(message);
      } else {
        await handleTextMessage(message);
      }
    }

    return NextResponse.json({ ok: true });
  } catch (error) {
    console.error('Telegram webhook error:', error);
    return NextResponse.json({ ok: true }); // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ok –¥–ª—è Telegram
  }
}

// GET –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
export async function GET() {
  return NextResponse.json({ 
    status: 'Telegram webhook is running',
    timestamp: new Date().toISOString()
  });
}
