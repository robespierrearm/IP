import { NextRequest, NextResponse } from 'next/server';

// API endpoint –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–Ω–¥–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –ò–ò
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: Google AI –∏ Intelligence.io

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞—Ç—ã
function validateDate(dateString: any): string | null {
  if (!dateString || dateString === 'null') return null;
  
  const str = String(dateString).trim();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
  const dateRegex = /^\d{4}-\d{2}-\d{2}$/;
  if (dateRegex.test(str)) {
    const date = new Date(str);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –≤–∞–ª–∏–¥–Ω–∞—è
    if (!isNaN(date.getTime())) {
      return str;
    }
  }
  
  return null;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–µ–Ω—ã
function parsePrice(priceValue: any): number | null {
  if (!priceValue || priceValue === 'null') return null;
  
  // –ï—Å–ª–∏ —É–∂–µ —á–∏—Å–ª–æ
  if (typeof priceValue === 'number') {
    return priceValue > 0 ? priceValue : null;
  }
  
  // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ - –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ
  if (typeof priceValue === 'string') {
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ —Ç–æ—á–∫–∏
    const cleaned = priceValue.replace(/[^\d.]/g, '');
    const num = parseFloat(cleaned);
    return !isNaN(num) && num > 0 ? num : null;
  }
  
  return null;
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { url, html, provider = 'intelligence' } = body; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Intelligence.io (–±—ã—Å—Ç—Ä–µ–µ)

    if (!url && !html) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å URL –∏–ª–∏ HTML' },
        { status: 400 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    let pageContent = html;
    
    if (url && !html) {
      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ URL
        const response = await fetch(url, {
          headers: {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
          }
        });
        
        if (!response.ok) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É');
        }
        
        pageContent = await response.text();
      } catch (error) {
        return NextResponse.json(
          { 
            error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—Å—Ç–∞–≤–∏—Ç—å HTML –∫–æ–¥ –≤—Ä—É—á–Ω—É—é.',
            hint: '–û—Ç–∫—Ä–æ–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–µ–Ω–¥–µ—Ä–∞ ‚Üí Ctrl+U ‚Üí –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ ‚Üí –í—Å—Ç–∞–≤—å—Ç–µ –≤ –ø–æ–ª–µ HTML'
          },
          { status: 400 }
        );
      }
    }

    // –û—á–∏—â–∞–µ–º HTML - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    const cleanedHtml = pageContent
      // –£–¥–∞–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã
      .replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '')
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∏–ª–∏
      .replace(/<style\b[^<]*(?:(?!<\/style>)<[^<]*)*<\/style>/gi, '')
      // –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
      .replace(/<!--[\s\S]*?-->/g, '')
      // –£–¥–∞–ª—è–µ–º SVG
      .replace(/<svg\b[^<]*(?:(?!<\/svg>)<[^<]*)*<\/svg>/gi, '')
      // –£–¥–∞–ª—è–µ–º inline —Å—Ç–∏–ª–∏
      .replace(/\s+style="[^"]*"/gi, '')
      // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–Ω—Ç)
      .replace(/\s+class="[^"]*"/gi, '')
      // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
      .replace(/\s+/g, ' ')
      .trim()
      .substring(0, 25000); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä

    // –ü—Ä–æ–º–ø—Ç –¥–ª—è –ò–ò
    const prompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–∞—Ä—Å–∏–Ω–≥—É —Ç–µ–Ω–¥–µ—Ä–æ–≤. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –∏–∑–≤–ª–µ—á—å –¢–û–õ–¨–ö–û –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–Ω–¥–µ—Ä–µ.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
- –í–æ–∑–≤—Ä–∞—â–∞–π –¢–û–õ–¨–ö–û JSON –æ–±—ä–µ–∫—Ç
- –ë–ï–ó markdown (–±–µ–∑ \`\`\`json)
- –ë–ï–ó –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
- –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω –≤ –ø–æ–ª–µ - —Å—Ç–∞–≤—å null

–ò–ó–í–õ–ï–ö–ò –°–õ–ï–î–£–Æ–©–ò–ï –î–ê–ù–ù–´–ï:

1. **name** (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û) - –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–Ω–¥–µ—Ä–∞/–∑–∞–∫—É–ø–∫–∏
   –ò—â–∏: "–ü—Ä–µ–¥–º–µ—Ç –∑–∞–∫—É–ø–∫–∏", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–¢–µ–Ω–¥–µ—Ä:", "–ó–∞–∫—É–ø–∫–∞:"
   –ü—Ä–∏–º–µ—Ä: "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ —à–∫–æ–ª—ã –≤ –ú–æ—Å–∫–≤–µ"

2. **purchase_number** - –ù–æ–º–µ—Ä –∑–∞–∫—É–ø–∫–∏/–∏–∑–≤–µ—â–µ–Ω–∏—è
   –ò—â–∏: "–ù–æ–º–µ—Ä –∏–∑–≤–µ—â–µ–Ω–∏—è", "‚Ññ", "–†–µ–µ—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä"
   –ü—Ä–∏–º–µ—Ä: "0373100005423000123"

3. **region** - –†–µ–≥–∏–æ–Ω/–∞–¥—Ä–µ—Å –ø–æ—Å—Ç–∞–≤–∫–∏
   –ò—â–∏: "–†–µ–≥–∏–æ–Ω", "–ê–¥—Ä–µ—Å –ø–æ—Å—Ç–∞–≤–∫–∏", "–ú–µ—Å—Ç–æ –ø–æ—Å—Ç–∞–≤–∫–∏"
   –ü—Ä–∏–º–µ—Ä: "–ú–æ—Å–∫–≤–∞" –∏–ª–∏ "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞"

4. **publication_date** - –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (—Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD)
   –ò—â–∏: "–î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è", "–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ", "–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
   –ü—Ä–∏–º–µ—Ä: "2025-10-20"

5. **submission_deadline** - –î–µ–¥–ª–∞–π–Ω –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ (—Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD)
   –ò—â–∏: "–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø—Ä–∏—ë–º–∞ –∑–∞—è–≤–æ–∫", "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è", "–î–µ–¥–ª–∞–π–Ω"
   –ü—Ä–∏–º–µ—Ä: "2025-11-15"

6. **start_price** - –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ (–¢–û–õ–¨–ö–û –ß–ò–°–õ–û, –±–µ–∑ –≤–∞–ª—é—Ç—ã –∏ –ø—Ä–æ–±–µ–ª–æ–≤)
   –ò—â–∏: "–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", "–ù–ú–¶–ö", "–¶–µ–Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"
   –ü—Ä–∏–º–µ—Ä: 15000000 (–Ω–µ "15 000 000 —Ä—É–±")

7. **link** - –°—Å—ã–ª–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–π: ${url || 'null'})

–°–¢–†–û–ì–ò–ô –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (–ë–ï–ó –õ–ò–®–ù–ï–ì–û –¢–ï–ö–°–¢–ê):
{
  "name": "...",
  "purchase_number": "..." –∏–ª–∏ null,
  "region": "..." –∏–ª–∏ null,
  "publication_date": "YYYY-MM-DD" –∏–ª–∏ null,
  "submission_deadline": "YYYY-MM-DD" –∏–ª–∏ null,
  "start_price": —á–∏—Å–ª–æ –∏–ª–∏ null,
  "link": "..." –∏–ª–∏ null
}

HTML –°–¢–†–ê–ù–ò–¶–´:
${cleanedHtml}`;

    let parsedData;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Intelligence.io –∏–ª–∏ Google AI
    try {
      console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ –ò–ò, –ø—Ä–æ–≤–∞–π–¥–µ—Ä:', provider);
      console.log('üìù –†–∞–∑–º–µ—Ä HTML:', cleanedHtml.length, '—Å–∏–º–≤–æ–ª–æ–≤');
      
      if (provider === 'intelligence') {
        parsedData = await parseWithIntelligenceIO(prompt);
      } else if (provider === 'google') {
        parsedData = await parseWithGoogleAI(prompt);
      } else {
        throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ intelligence –∏–ª–∏ google');
      }
      
      console.log('‚úÖ –ò–ò –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(parsedData, null, 2));
    } catch (error: any) {
      console.error('‚ùå AI parsing error:', error.message);
      console.error('–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
      
      // –ï—Å–ª–∏ Intelligence –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º Google
      if (provider === 'intelligence') {
        console.log('üîÑ –ü—Ä–æ–±—É—é Google AI –∫–∞–∫ fallback...');
        try {
          parsedData = await parseWithGoogleAI(prompt);
          console.log('‚úÖ Google AI –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(parsedData, null, 2));
        } catch (fallbackError: any) {
          console.error('‚ùå Google AI —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', fallbackError.message);
          throw new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±–æ–∏–º–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏: ${error.message}`);
        }
      } else {
        throw error;
      }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if (!parsedData || !parsedData.name) {
      return NextResponse.json(
        { error: '–ò–ò –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–Ω–¥–µ—Ä–∞. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ HTML —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–Ω–¥–µ—Ä–µ.' },
        { status: 400 }
      );
    }

    // –û—á–∏—Å—Ç–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    const cleanedData = {
      name: String(parsedData.name || '').trim(),
      purchase_number: parsedData.purchase_number ? String(parsedData.purchase_number).trim() : '',
      link: parsedData.link || url || '',
      region: parsedData.region ? String(parsedData.region).trim() : '',
      publication_date: validateDate(parsedData.publication_date) || '',
      submission_deadline: validateDate(parsedData.submission_deadline) || '',
      start_price: parsePrice(parsedData.start_price),
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ö–æ—Ç—è –±—ã –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—Å—Ç—å
    if (!cleanedData.name || cleanedData.name === 'null' || cleanedData.name.length < 5) {
      return NextResponse.json(
        { error: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–Ω–¥–µ—Ä–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã.' },
        { status: 400 }
      );
    }

    return NextResponse.json({
      success: true,
      data: cleanedData
    });

  } catch (error: any) {
    console.error('Parse tender error:', error);
    return NextResponse.json(
      { error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ Intelligence.io (Llama 3.3 70B)
async function parseWithIntelligenceIO(prompt: string) {
  const apiKey = 'io-v2-eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJvd25lciI6IjNmMzg4Yzc0LWYzZjItNDI0ZC04MmExLTFlNzhhMzUxY2NjNiIsImV4cCI6NDkxNDQxMTI2MH0.TDGo9AQD2jWlIj56dy8Vk0_EMq7jQX6bcTWgsfyZLmr-vTyv2ygvOIb03CNJWtAE6jecQyNPB2YMvRap9fqs-A';
  
  const response = await fetch('https://api.intelligence.io.solutions/api/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${apiKey}`,
    },
    body: JSON.stringify({
      model: 'meta-llama/Llama-3.3-70B-Instruct',
      messages: [
        {
          role: 'system',
          content: '–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–º JSON, –±–µ–∑ markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      temperature: 0.1,
      max_tokens: 2000,
    }),
  });

  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(`Intelligence.io error: ${response.statusText} - ${errorText}`);
  }

  const result = await response.json();
  let content = result.choices[0]?.message?.content || '';
  
  console.log('üì• Intelligence.io —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç:', content.substring(0, 500));
  
  // –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç markdown
  content = content.replace(/```json\s*/g, '').replace(/```\s*/g, '');
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ (–±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π {})
  const firstBrace = content.indexOf('{');
  const lastBrace = content.lastIndexOf('}');
  
  if (firstBrace === -1 || lastBrace === -1) {
    console.error('‚ùå –ù–µ—Ç JSON –≤ –æ—Ç–≤–µ—Ç–µ. –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:', content);
    throw new Error('–ò–ò –Ω–µ –≤–µ—Ä–Ω—É–ª JSON –æ–±—ä–µ–∫—Ç');
  }
  
  const jsonString = content.substring(firstBrace, lastBrace + 1);
  console.log('üîç –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π JSON:', jsonString.substring(0, 300));
  
  try {
    return JSON.parse(jsonString);
  } catch (error) {
    console.error('‚ùå JSON parse error. –°—Ç—Ä–æ–∫–∞:', jsonString);
    throw new Error('–ò–ò –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON');
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ Google AI (Gemini)
async function parseWithGoogleAI(prompt: string) {
  const apiKey = 'AIzaSyB4q--whZbW0GpezMXfJncEQibZayhRbaA';
  const model = 'gemini-2.0-flash-exp';
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º CORS –ø—Ä–æ–∫—Å–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
  const targetUrl = `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${apiKey}`;
  const proxyUrl = `https://corsproxy.io/?${encodeURIComponent(targetUrl)}`;

  const response = await fetch(proxyUrl, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      contents: [{
        role: 'user',
        parts: [{ text: '–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–º JSON, –±–µ–∑ markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n' + prompt }],
      }],
      generationConfig: {
        temperature: 0.1,
        maxOutputTokens: 2000,
      },
    }),
  });

  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(`Google AI error: ${response.statusText} - ${errorText}`);
  }

  const result = await response.json();
  let content = result.candidates[0]?.content?.parts[0]?.text || '';
  
  console.log('üì• Google AI —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç:', content.substring(0, 500));
  
  // –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç markdown
  content = content.replace(/```json\s*/g, '').replace(/```\s*/g, '');
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ (–±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π {})
  const firstBrace = content.indexOf('{');
  const lastBrace = content.lastIndexOf('}');
  
  if (firstBrace === -1 || lastBrace === -1) {
    console.error('‚ùå –ù–µ—Ç JSON –≤ –æ—Ç–≤–µ—Ç–µ. –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:', content);
    throw new Error('–ò–ò –Ω–µ –≤–µ—Ä–Ω—É–ª JSON –æ–±—ä–µ–∫—Ç');
  }
  
  const jsonString = content.substring(firstBrace, lastBrace + 1);
  console.log('üîç –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π JSON:', jsonString.substring(0, 300));
  
  try {
    return JSON.parse(jsonString);
  } catch (error) {
    console.error('‚ùå JSON parse error. –°—Ç—Ä–æ–∫–∞:', jsonString);
    throw new Error('–ò–ò –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON');
  }
}
