import { NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';
import bcrypt from 'bcryptjs';

/**
 * API –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * –í—ã–∑–≤–∞—Ç—å –æ–¥–∏–Ω —Ä–∞–∑: GET /api/admin/hash-passwords
 */
export async function GET() {
  try {
    console.log('üîê –ù–∞—á–∏–Ω–∞–µ–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π...');

    // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { data: users, error } = await supabase
      .from('users')
      .select('id, email, password');

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      return NextResponse.json(
        { error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', details: error },
        { status: 500 }
      );
    }

    if (!users || users.length === 0) {
      return NextResponse.json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' });
    }

    const results = [];

    // 2. –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª–∏
    for (const user of users) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–∞—Ä–æ–ª—å
      const isBcryptHash = user.password.startsWith('$2a$') || user.password.startsWith('$2b$');
      
      if (isBcryptHash) {
        results.push({ email: user.email, status: 'already_hashed' });
        continue;
      }

      // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
      const hashedPassword = await bcrypt.hash(user.password, 10);

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ
      const { error: updateError } = await supabase
        .from('users')
        .update({ password: hashedPassword })
        .eq('id', user.id);

      if (updateError) {
        results.push({ email: user.email, status: 'error', error: updateError });
      } else {
        results.push({ email: user.email, status: 'hashed' });
      }
    }

    return NextResponse.json({
      success: true,
      message: '–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
      results,
    });
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    return NextResponse.json(
      { error: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞', details: error },
      { status: 500 }
    );
  }
}
